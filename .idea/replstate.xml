<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1417420472382">{:repl-history {:ide [], :local [&quot;(defn get-description\n  [html]\n  (let [content (-&gt; (html/select html [:#J_DivItemDesc :table])\n                    first\n                    (html/select [:p]))]\n    (-&gt;&gt; (html/texts content)\n         identity\n         ;(filter #(= \&quot;\&quot; %))\n         ;(map string/trim)\n         )))&quot; &quot;(defn get-description\n  [html]\n  (let [content (-&gt; (html/select html [:#J_DivItemDesc :table])\n                    first\n                    (html/select [:p]))]\n    (-&gt;&gt; (html/texts content)\n         identity\n         (remove #(= \&quot;\&quot; %))\n         (map string/trim)\n         )))&quot; &quot;(defn get-description\n  [html]\n  (let [content (-&gt; (html/select html [:#J_DivItemDesc :table])\n                    first\n                    (html/select [:p]))]\n    (-&gt;&gt; (html/texts content)\n         identity\n         (remove #(= \&quot;\&quot; %))\n         (map string/trim)\n         (string/join \&quot;////\&quot;)\n         )))&quot; &quot;(get-description (freeze))&quot; &quot;(defn get-attribute\n  [html]\n  (html/select html [:.attributes-list]))&quot; &quot;(defn get-attribute\n  [html]\n  (html/select html [:.attributes-list :url]))&quot; &quot;(defn get-attribute\n  [html]\n  (html/select html [:.attributes-list :ul]))&quot; &quot;(defn get-attribute\n  [html]\n  (html/select html [:#attributes :ul]))&quot; &quot;(defn get-attribute\n  [html]\n  (-&gt; (html/select html [:#attributes :ul])\n      (html/texts)))&quot; &quot;(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul])\n      (map html/text)))&quot; &quot;(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul])\n      (map html/text)\n      (map string/trim)\n      (string/join \&quot;////\&quot;)))&quot; &quot;(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul])\n      (map html/text)\n      (map string/trim)\n      ;(string/join \&quot;////\&quot;)\n      ))&quot; &quot;(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul])\n      (map html/text)\n      ;(map string/trim)\n      ;(string/join \&quot;////\&quot;)\n      ))&quot; &quot;(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul])\n       identity\n       ;(map html/text)\n      ;(map string/trim)\n      ;(string/join \&quot;////\&quot;)\n      ))&quot; &quot;(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul :li])\n       (map html/text)\n      (map string/trim)\n      (string/join \&quot;////\&quot;)\n      ))&quot; &quot;(get-attribute (freeze))&quot; &quot;(UUID/randomUUID)&quot; &quot;(defn get-meta\n  [html]\n  {:title (get-title html)\n   :description (get-description html)\n   :attribute (get-attribute html)\n   :uuid (UUID/randomUUID)})&quot; &quot;(get-meta (freeze))&quot; &quot;(str (UUID/randomUUID))&quot; &quot;(defn save-picture\n  [url file]\n  (with-open [in (io/input-stream url)\n              out (io/output-stream file)]\n    (io/copy in out)))&quot; &quot;(defn get-picture\n  [html]\n  (let [products (get-product-src html)\n        models (get-product-src html)\n        uuid (:uuid (get-meta html))\n        c1 (atom 1)\n        c2 (atom 1)]\n    (doseq [p products]\n      (save-picture p (str \&quot;C:/data/uniqlo/\&quot; uuid \&quot;_product_\&quot; @c1 \&quot;.jpg\&quot;))\n      (swap! c1 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))\n    (doseq [m models]\n      (save-picture m (str \&quot;C:/data/uniqlo/\&quot; uuid \&quot;_model_\&quot; @c2 \&quot;.jpg\&quot;))\n      (swap! c2 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))))&quot; &quot;(defn get-picture\n  [html]\n  (let [products (get-product-src html)\n        models (get-model-src html)\n        uuid (:uuid (get-meta html))\n        c1 (atom 1)\n        c2 (atom 1)]\n    (doseq [p products]\n      (save-picture p (str \&quot;C:/data/uniqlo/\&quot; uuid \&quot;_product_\&quot; @c1 \&quot;.jpg\&quot;))\n      (swap! c1 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))\n    (doseq [m models]\n      (save-picture m (str \&quot;C:/data/uniqlo/\&quot; uuid \&quot;_model_\&quot; @c2 \&quot;.jpg\&quot;))\n      (swap! c2 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))))&quot; &quot;(defn get-product-src\n  [html]\n  (-&gt;&gt; (html/select html [:#zoom-cache :img])\n      (map #(get-in % [:attrs :src]))))&quot; &quot;(defn get-product-src\n  [html]\n  (-&gt;&gt; (html/select html [:.zoom-cache :img])\n      (map #(get-in % [:attrs :src]))))&quot; &quot;(get-product-src (freeze))&quot; &quot;(ns uniqlo.core\n  (:import (java.io ByteArrayOutputStream File InputStreamReader StringReader)\n           (javax.imageio ImageIO)\n           (java.net URL)\n           [org.openqa.selenium WebDriver Cookie OutputType TakesScreenshot]\n           [org.openqa.selenium WebElement]\n           [org.openqa.selenium.support.ui ExpectedCondition ExpectedConditions]\n           [org.openqa.selenium.support.ui WebDriverWait]\n           (org.openqa.selenium.firefox FirefoxDriver FirefoxProfile)\n           (org.openqa.selenium By)\n           (org.openqa.selenium Cookie)\n           (org.openqa.selenium JavascriptExecutor)\n           (org.openqa.selenium.htmlunit HtmlUnitDriver)\n           (org.openqa.selenium.firefox.internal ProfilesIni)\n           (java.io File)\n           (org.openqa.selenium.ie InternetExplorerDriver)\n           (org.openqa.selenium.chrome ChromeDriver)\n           (org.openqa.selenium.remote Augmenter)\n           (java.util UUID))\n  (:require [mikera.image.core :as imagez]\n            [clojure.java.io :as io]\n            [net.cgrand.enlive-html :as html]\n            [clojure.string :as string]))\n\n\n(def ^:dynamic my-driver nil)\n\n(defmacro use-firefox\n  []\n  `(def my-driver (FirefoxDriver.)))\n\n(defmacro use-htmlunit\n  []\n  `(def my-driver (HtmlUnitDriver.)))\n\n(defmacro use-ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;resources/driver/IEDriverServer.exe\&quot;)]\n    `(def my-driver (InternetExplorerDriver.))))\n\n(defmacro use-chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;resources/driver/chromedriver.exe\&quot;)]\n    `(def my-driver (ChromeDriver.))))\n\n(defn firefox\n  []\n  (FirefoxDriver.))\n\n(defn htmlunit\n  []\n  (HtmlUnitDriver.))\n\n(defn ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;C:/iedriver/IEDriverServer.exe\&quot;)]\n    (InternetExplorerDriver.)))\n\n(defn chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;C:/chromedriver/chromedriver.exe\&quot;)]\n    (ChromeDriver.)))\n\n(defn to\n  [url]\n  (.get my-driver url))\n\n(defn execute-script\n  [^String script]\n  (.executeScript ^JavascriptExecutor my-driver script (make-array Object 0)))\n\n(defn freeze\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource))\n\n(defn get-url\n  [url]\n  (let [html (html/html-resource (URL. url))\n        items (html/select html [:.permalink])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n\n(defn get-html\n  [url &amp; {:keys [encoding] :or {encoding \&quot;gbk\&quot;}}]\n  (-&gt; (URL. url)\n      .getContent\n      (InputStreamReader. encoding)\n      html/html-resource))\n\n\n(defn get-product-src\n  [html]\n  (-&gt;&gt; (html/select html [:.zoom-cache :img])\n      (map #(get-in % [:attrs :src]))))\n\n(defn get-model-src\n  [html]\n  (let [src (-&gt; (html/select html [:#J_DivItemDesc :table])\n       second\n       (html/select [:img]))]\n    (map #(get-in % [:attrs :src]) src)))\n\n(defn get-title\n  [html]\n  (-&gt; (html/select html [:.detail-hd])\n      first\n      html/text\n      string/trim))\n\n(defn get-description\n  [html]\n  (let [content (-&gt; (html/select html [:#J_DivItemDesc :table])\n                    first\n                    (html/select [:p]))]\n    (-&gt;&gt; (html/texts content)\n         (remove #(= \&quot;\&quot; %))\n         (map string/trim)\n         (string/join \&quot;////\&quot;))))\n\n(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul :li])\n       (map html/text)\n      (map string/trim)\n      (string/join \&quot;////\&quot;)\n      ))\n\n(defn save-picture\n  [url file]\n  (with-open [in (io/input-stream url)\n              out (io/output-stream file)]\n    (io/copy in out)))\n\n(defn get-meta\n  [html]\n  {:title (get-title html)\n   :description (get-description html)\n   :attribute (get-attribute html)\n   :uuid (UUID/randomUUID)})\n\n(defn get-picture\n  [html]\n  (let [products (get-product-src html)\n        models (get-model-src html)\n        uuid (:uuid (get-meta html))\n        c1 (atom 1)\n        c2 (atom 1)]\n    (doseq [p products]\n      (save-picture p (str \&quot;C:/data/uniqlo/\&quot; uuid \&quot;_product_\&quot; @c1 \&quot;.jpg\&quot;))\n      (swap! c1 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))\n    (doseq [m models]\n      (save-picture m (str \&quot;C:/data/uniqlo/\&quot; uuid \&quot;_model_\&quot; @c2 \&quot;.jpg\&quot;))\n      (swap! c2 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))))\n\n&quot; &quot;(to \&quot;http://www.uniqlo.cn/item.htm?spm=0.0.0.0.7wMQaY&amp;id=39615130950\&quot;)&quot; &quot;(get-picture (freeze))&quot; &quot;(get-url \&quot;http://www.uniqlo.cn/view_page-273680180.htm?spm=0.0.0.0.QL2gPR\&quot;)&quot; &quot;(ns uniqlo.core\n  (:import (java.io ByteArrayOutputStream File InputStreamReader StringReader)\n           (javax.imageio ImageIO)\n           (java.net URL)\n           [org.openqa.selenium WebDriver Cookie OutputType TakesScreenshot]\n           [org.openqa.selenium WebElement]\n           [org.openqa.selenium.support.ui ExpectedCondition ExpectedConditions]\n           [org.openqa.selenium.support.ui WebDriverWait]\n           (org.openqa.selenium.firefox FirefoxDriver FirefoxProfile)\n           (org.openqa.selenium By)\n           (org.openqa.selenium Cookie)\n           (org.openqa.selenium JavascriptExecutor)\n           (org.openqa.selenium.htmlunit HtmlUnitDriver)\n           (org.openqa.selenium.firefox.internal ProfilesIni)\n           (java.io File)\n           (org.openqa.selenium.ie InternetExplorerDriver)\n           (org.openqa.selenium.chrome ChromeDriver)\n           (org.openqa.selenium.remote Augmenter)\n           (java.util UUID))\n  (:require [mikera.image.core :as imagez]\n            [clojure.java.io :as io]\n            [net.cgrand.enlive-html :as html]\n            [clojure.string :as string]\n            [clojure-csv.core :as clj-csv]\n            ))&quot; &quot;(ns uniqlo.core\n  (:import (java.io ByteArrayOutputStream File InputStreamReader StringReader)\n           (javax.imageio ImageIO)\n           (java.net URL)\n           [org.openqa.selenium WebDriver Cookie OutputType TakesScreenshot]\n           [org.openqa.selenium WebElement]\n           [org.openqa.selenium.support.ui ExpectedCondition ExpectedConditions]\n           [org.openqa.selenium.support.ui WebDriverWait]\n           (org.openqa.selenium.firefox FirefoxDriver FirefoxProfile)\n           (org.openqa.selenium By)\n           (org.openqa.selenium Cookie)\n           (org.openqa.selenium JavascriptExecutor)\n           (org.openqa.selenium.htmlunit HtmlUnitDriver)\n           (org.openqa.selenium.firefox.internal ProfilesIni)\n           (java.io File)\n           (org.openqa.selenium.ie InternetExplorerDriver)\n           (org.openqa.selenium.chrome ChromeDriver)\n           (org.openqa.selenium.remote Augmenter)\n           (java.util UUID))\n  (:require [mikera.image.core :as imagez]\n            [clojure.java.io :as io]\n            [net.cgrand.enlive-html :as html]\n            [clojure.string :as string]\n            [clojure-csv.core :as clj-csv]\n            ))\n\n\n(def ^:dynamic my-driver nil)\n\n(defmacro use-firefox\n  []\n  `(def my-driver (FirefoxDriver.)))\n\n(defmacro use-htmlunit\n  []\n  `(def my-driver (HtmlUnitDriver.)))\n\n(defmacro use-ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;resources/driver/IEDriverServer.exe\&quot;)]\n    `(def my-driver (InternetExplorerDriver.))))\n\n(defmacro use-chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;resources/driver/chromedriver.exe\&quot;)]\n    `(def my-driver (ChromeDriver.))))\n\n(defn firefox\n  []\n  (FirefoxDriver.))\n\n(defn htmlunit\n  []\n  (HtmlUnitDriver.))\n\n(defn ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;C:/iedriver/IEDriverServer.exe\&quot;)]\n    (InternetExplorerDriver.)))\n\n(defn chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;C:/chromedriver/chromedriver.exe\&quot;)]\n    (ChromeDriver.)))\n\n(defn to\n  [url]\n  (.get my-driver url))\n\n(defn execute-script\n  [^String script]\n  (.executeScript ^JavascriptExecutor my-driver script (make-array Object 0)))\n\n(defn freeze\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource))\n\n(defn write-csv-quoted\n  [coll file &amp; {:keys [append encoding]}]\n  (let [keys-vec (keys (first coll))\n        vals-vecs (map (apply juxt keys-vec) coll)]\n    (with-open [out (io/writer file :append append :encoding encoding)]\n      (binding [*out* out]\n        (when-not append\n          (print (clj-csv/write-csv (vector (map name keys-vec)) :force-quote true)))\n        (doseq [v vals-vecs]\n          (let [v (map str v)]\n            (print (clj-csv/write-csv (vector v) :force-quote true))))))))\n\n(defn get-url\n  [url]\n  (let [html (html/html-resource (URL. url))\n        items (html/select html [:.permalink])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n\n(defn get-html\n  [url &amp; {:keys [encoding] :or {encoding \&quot;gbk\&quot;}}]\n  (-&gt; (URL. url)\n      .getContent\n      (InputStreamReader. encoding)\n      html/html-resource))\n\n\n(defn get-product-src\n  [html]\n  (-&gt;&gt; (html/select html [:.zoom-cache :img])\n      (map #(get-in % [:attrs :src]))))\n\n(defn get-model-src\n  [html]\n  (let [src (-&gt; (html/select html [:#J_DivItemDesc :table])\n       second\n       (html/select [:img]))]\n    (map #(get-in % [:attrs :src]) src)))\n\n(defn get-title\n  [html]\n  (-&gt; (html/select html [:.detail-hd])\n      first\n      html/text\n      string/trim))\n\n(defn get-description\n  [html]\n  (let [content (-&gt; (html/select html [:#J_DivItemDesc :table])\n                    first\n                    (html/select [:p]))]\n    (-&gt;&gt; (html/texts content)\n         (remove #(= \&quot;\&quot; %))\n         (map string/trim)\n         (string/join \&quot;////\&quot;))))\n\n(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul :li])\n       (map html/text)\n      (map string/trim)\n      (string/join \&quot;////\&quot;)\n      ))\n\n(defn save-picture\n  [url file]\n  (with-open [in (io/input-stream url)\n              out (io/output-stream file)]\n    (io/copy in out)))\n\n(defn get-meta\n  [html]\n  {:title (get-title html)\n   :description (get-description html)\n   :attribute (get-attribute html)\n   :uuid (UUID/randomUUID)})\n\n(defn get-picture\n  [html]\n  (let [products (get-product-src html)\n        models (get-model-src html)\n        uuid (:uuid (get-meta html))\n        c1 (atom 1)\n        c2 (atom 1)]\n    (doseq [p products]\n      (save-picture p (str \&quot;C:/data/uniqlo/\&quot; uuid \&quot;_product_\&quot; @c1 \&quot;.jpg\&quot;))\n      (swap! c1 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))\n    (doseq [m models]\n      (save-picture m (str \&quot;C:/data/uniqlo/\&quot; uuid \&quot;_model_\&quot; @c2 \&quot;.jpg\&quot;))\n      (swap! c2 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))))\n\n(doseq [u (get-url \&quot;http://www.uniqlo.cn/view_page-273680180.htm?spm=0.0.0.0.QL2gPR\&quot;)]\n  (to u)\n  (Thread/sleep 5000)\n  ())&quot; &quot;(ns uniqlo.core\n  (:import (java.io ByteArrayOutputStream File InputStreamReader StringReader)\n           (javax.imageio ImageIO)\n           (java.net URL)\n           [org.openqa.selenium WebDriver Cookie OutputType TakesScreenshot]\n           [org.openqa.selenium WebElement]\n           [org.openqa.selenium.support.ui ExpectedCondition ExpectedConditions]\n           [org.openqa.selenium.support.ui WebDriverWait]\n           (org.openqa.selenium.firefox FirefoxDriver FirefoxProfile)\n           (org.openqa.selenium By)\n           (org.openqa.selenium Cookie)\n           (org.openqa.selenium JavascriptExecutor)\n           (org.openqa.selenium.htmlunit HtmlUnitDriver)\n           (org.openqa.selenium.firefox.internal ProfilesIni)\n           (java.io File)\n           (org.openqa.selenium.ie InternetExplorerDriver)\n           (org.openqa.selenium.chrome ChromeDriver)\n           (org.openqa.selenium.remote Augmenter)\n           (java.util UUID))\n  (:require [mikera.image.core :as imagez]\n            [clojure.java.io :as io]\n            [net.cgrand.enlive-html :as html]\n            [clojure.string :as string]\n            [clojure-csv.core :as clj-csv]\n            ))\n\n\n(def ^:dynamic my-driver nil)\n\n(defmacro use-firefox\n  []\n  `(def my-driver (FirefoxDriver.)))\n\n(defmacro use-htmlunit\n  []\n  `(def my-driver (HtmlUnitDriver.)))\n\n(defmacro use-ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;resources/driver/IEDriverServer.exe\&quot;)]\n    `(def my-driver (InternetExplorerDriver.))))\n\n(defmacro use-chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;resources/driver/chromedriver.exe\&quot;)]\n    `(def my-driver (ChromeDriver.))))\n\n(defn firefox\n  []\n  (FirefoxDriver.))\n\n(defn htmlunit\n  []\n  (HtmlUnitDriver.))\n\n(defn ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;C:/iedriver/IEDriverServer.exe\&quot;)]\n    (InternetExplorerDriver.)))\n\n(defn chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;C:/chromedriver/chromedriver.exe\&quot;)]\n    (ChromeDriver.)))\n\n(defn to\n  [url]\n  (.get my-driver url))\n\n(defn execute-script\n  [^String script]\n  (.executeScript ^JavascriptExecutor my-driver script (make-array Object 0)))\n\n(defn freeze\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource))\n\n(defn write-csv-quoted\n  [coll file &amp; {:keys [append encoding]}]\n  (let [keys-vec (keys (first coll))\n        vals-vecs (map (apply juxt keys-vec) coll)]\n    (with-open [out (io/writer file :append append :encoding encoding)]\n      (binding [*out* out]\n        (when-not append\n          (print (clj-csv/write-csv (vector (map name keys-vec)) :force-quote true)))\n        (doseq [v vals-vecs]\n          (let [v (map str v)]\n            (print (clj-csv/write-csv (vector v) :force-quote true))))))))\n\n(defn get-url\n  [url]\n  (let [html (html/html-resource (URL. url))\n        items (html/select html [:.permalink])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n\n(defn get-html\n  [url &amp; {:keys [encoding] :or {encoding \&quot;gbk\&quot;}}]\n  (-&gt; (URL. url)\n      .getContent\n      (InputStreamReader. encoding)\n      html/html-resource))\n\n\n(defn get-product-src\n  [html]\n  (-&gt;&gt; (html/select html [:.zoom-cache :img])\n      (map #(get-in % [:attrs :src]))))\n\n(defn get-model-src\n  [html]\n  (let [src (-&gt; (html/select html [:#J_DivItemDesc :table])\n       second\n       (html/select [:img]))]\n    (map #(get-in % [:attrs :src]) src)))\n\n(defn get-title\n  [html]\n  (-&gt; (html/select html [:.detail-hd])\n      first\n      html/text\n      string/trim))\n\n(defn get-description\n  [html]\n  (let [content (-&gt; (html/select html [:#J_DivItemDesc :table])\n                    first\n                    (html/select [:p]))]\n    (-&gt;&gt; (html/texts content)\n         (remove #(= \&quot;\&quot; %))\n         (map string/trim)\n         (string/join \&quot;////\&quot;))))\n\n(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul :li])\n       (map html/text)\n      (map string/trim)\n      (string/join \&quot;////\&quot;)\n      ))\n\n(defn save-picture\n  [url file]\n  (with-open [in (io/input-stream url)\n              out (io/output-stream file)]\n    (io/copy in out)))\n\n(defn get-meta\n  [html]\n  {:title (get-title html)\n   :description (get-description html)\n   :attribute (get-attribute html)\n   :uuid (UUID/randomUUID)})\n\n(defn get-picture\n  [html]\n  (let [products (get-product-src html)\n        models (get-model-src html)\n        uuid (:uuid (get-meta html))\n        c1 (atom 1)\n        c2 (atom 1)]\n    (doseq [p products]\n      (save-picture p (str \&quot;C:/data/uniqlo/\&quot; uuid \&quot;_product_\&quot; @c1 \&quot;.jpg\&quot;))\n      (swap! c1 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))\n    (doseq [m models]\n      (save-picture m (str \&quot;C:/data/uniqlo/\&quot; uuid \&quot;_model_\&quot; @c2 \&quot;.jpg\&quot;))\n      (swap! c2 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))))\n\n#_(doseq [u (get-url \&quot;http://www.uniqlo.cn/view_page-273680180.htm?spm=0.0.0.0.QL2gPR\&quot;)]\n  (to u)\n  (Thread/sleep 5000)\n  ())&quot; &quot;(defn get-picture\n  [html fold]\n  (let [products (get-product-src html)\n        models (get-model-src html)\n        uuid (:uuid (get-meta html))\n        c1 (atom 1)\n        c2 (atom 1)]\n    (doseq [p products]\n      (save-picture p (str fold uuid \&quot;_product_\&quot; @c1 \&quot;.jpg\&quot;))\n      (swap! c1 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))\n    (doseq [m models]\n      (save-picture m (str fold uuid \&quot;_model_\&quot; @c2 \&quot;.jpg\&quot;))\n      (swap! c2 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))))&quot; &quot;(defn run\n  [url fold]\n  (let [urls (get-url url)\n        u1 (first urls)\n        urls (rest urls)\n        file (str fold \&quot;meta.csv\&quot;)]\n    (to u1)\n    (Thread/sleep 5000)\n    (let [html (freeze)\n          meta (get-meta html)]\n      (write-csv-quoted [meta] file)\n      (get-picture html fold))\n    (doseq [u urls]\n      (try\n        (to u)\n        (Thread/sleep 5000)\n        (let [html (freeze)\n              meta (get-meta html)]\n          (write-csv-quoted [meta] file)\n          (get-picture html fold))\n        (catch Throwable e (println \&quot;OOPS!\&quot;))))))&quot; &quot;(run \&quot;http://www.uniqlo.cn/view_page-273680180.htm?spm=0.0.0.0.QL2gPR\&quot;\n     \&quot;C:/data/uniqlo/a/\&quot;)&quot; &quot;(defn run\n  [url fold]\n  (let [urls (get-url url)\n        u1 (first urls)\n        urls (rest urls)\n        file (str fold \&quot;meta.csv\&quot;)]\n    (to u1)\n    (Thread/sleep 5000)\n    (let [html (freeze)\n          meta (get-meta html)]\n      (write-csv-quoted [meta] file)\n      (get-picture html fold))\n    (doseq [u urls]\n      (try\n        (to u)\n        (Thread/sleep 5000)\n        (let [html (freeze)\n              meta (get-meta html)]\n          (write-csv-quoted [meta] file :append true)\n          (get-picture html fold))\n        (catch Throwable e (println \&quot;OOPS!\&quot;))))))&quot; &quot;(defn run\n  [url fold]\n  (let [urls (get-url url)\n        u1 (first urls)\n        urls (rest urls)\n        file (str fold \&quot;meta.csv\&quot;)]\n    (to u1)\n    (Thread/sleep 5000)\n    (let [html (freeze)\n          meta (get-meta html)]\n      (write-csv-quoted [meta] file)\n      (get-picture html fold)\n      (println \&quot;Initiated!\&quot;))\n    (doseq [u urls]\n      (try\n        (to u)\n        (Thread/sleep 5000)\n        (let [html (freeze)\n              meta (get-meta html)]\n          (write-csv-quoted [meta] file :append true)\n          (get-picture html fold)\n          (println \&quot;Succeeded!\&quot;))\n        (catch Throwable e (println \&quot;OOPS!\&quot;))))))&quot; &quot;(run \&quot;http://www.uniqlo.cn/view_page-240793666.htm?spm=0.0.0.0.VWJV1J\&quot;\n     \&quot;C:/data/uniqlo/waitao\&quot;)&quot; &quot;(ns uniqlo.core\n  (:import (java.io ByteArrayOutputStream File InputStreamReader StringReader)\n           (javax.imageio ImageIO)\n           (java.net URL)\n           [org.openqa.selenium WebDriver Cookie OutputType TakesScreenshot]\n           [org.openqa.selenium WebElement]\n           [org.openqa.selenium.support.ui ExpectedCondition ExpectedConditions]\n           [org.openqa.selenium.support.ui WebDriverWait]\n           (org.openqa.selenium.firefox FirefoxDriver FirefoxProfile)\n           (org.openqa.selenium By)\n           (org.openqa.selenium Cookie)\n           (org.openqa.selenium JavascriptExecutor)\n           (org.openqa.selenium.htmlunit HtmlUnitDriver)\n           (org.openqa.selenium.firefox.internal ProfilesIni)\n           (java.io File)\n           (org.openqa.selenium.ie InternetExplorerDriver)\n           (org.openqa.selenium.chrome ChromeDriver)\n           (org.openqa.selenium.remote Augmenter)\n           (java.util UUID))\n  (:require [mikera.image.core :as imagez]\n            [clojure.java.io :as io]\n            [net.cgrand.enlive-html :as html]\n            [clojure.string :as string]\n            [clojure-csv.core :as clj-csv]\n            ))\n\n\n(def ^:dynamic my-driver nil)\n\n(defmacro use-firefox\n  []\n  `(def my-driver (FirefoxDriver.)))\n\n(defmacro use-htmlunit\n  []\n  `(def my-driver (HtmlUnitDriver.)))\n\n(defmacro use-ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;resources/driver/IEDriverServer.exe\&quot;)]\n    `(def my-driver (InternetExplorerDriver.))))\n\n(defmacro use-chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;resources/driver/chromedriver.exe\&quot;)]\n    `(def my-driver (ChromeDriver.))))\n\n(defn firefox\n  []\n  (FirefoxDriver.))\n\n(defn htmlunit\n  []\n  (HtmlUnitDriver.))\n\n(defn ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;C:/iedriver/IEDriverServer.exe\&quot;)]\n    (InternetExplorerDriver.)))\n\n(defn chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;C:/chromedriver/chromedriver.exe\&quot;)]\n    (ChromeDriver.)))\n\n(defn to\n  [url]\n  (.get my-driver url))\n\n(defn execute-script\n  [^String script]\n  (.executeScript ^JavascriptExecutor my-driver script (make-array Object 0)))\n\n(defn freeze\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource))\n\n(defn write-csv-quoted\n  [coll file &amp; {:keys [append encoding]}]\n  (let [keys-vec (keys (first coll))\n        vals-vecs (map (apply juxt keys-vec) coll)]\n    (with-open [out (io/writer file :append append :encoding encoding)]\n      (binding [*out* out]\n        (when-not append\n          (print (clj-csv/write-csv (vector (map name keys-vec)) :force-quote true)))\n        (doseq [v vals-vecs]\n          (let [v (map str v)]\n            (print (clj-csv/write-csv (vector v) :force-quote true))))))))\n\n(defn get-url\n  [url]\n  (let [html (html/html-resource (URL. url))\n        items (html/select html [:.permalink])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n\n(defn get-html\n  [url &amp; {:keys [encoding] :or {encoding \&quot;gbk\&quot;}}]\n  (-&gt; (URL. url)\n      .getContent\n      (InputStreamReader. encoding)\n      html/html-resource))\n\n\n(defn get-product-src\n  [html]\n  (-&gt;&gt; (html/select html [:.zoom-cache :img])\n      (map #(get-in % [:attrs :src]))))\n\n(defn get-model-src\n  [html]\n  (let [src (-&gt; (html/select html [:#J_DivItemDesc :table])\n       second\n       (html/select [:img]))]\n    (map #(get-in % [:attrs :src]) src)))\n\n(defn get-title\n  [html]\n  (-&gt; (html/select html [:.detail-hd])\n      first\n      html/text\n      string/trim))\n\n(defn get-description\n  [html]\n  (let [content (-&gt; (html/select html [:#J_DivItemDesc :table])\n                    first\n                    (html/select [:p]))]\n    (-&gt;&gt; (html/texts content)\n         (remove #(= \&quot;\&quot; %))\n         (map string/trim)\n         (string/join \&quot;////\&quot;))))\n\n(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul :li])\n       (map html/text)\n      (map string/trim)\n      (string/join \&quot;////\&quot;)\n      ))\n\n(defn save-picture\n  [url file]\n  (with-open [in (io/input-stream url)\n              out (io/output-stream file)]\n    (io/copy in out)))\n\n(defn get-meta\n  [html]\n  {:title (get-title html)\n   :description (get-description html)\n   :attribute (get-attribute html)\n   :uuid (UUID/randomUUID)})\n\n(defn get-picture\n  [html fold]\n  (let [products (get-product-src html)\n        models (get-model-src html)\n        uuid (:uuid (get-meta html))\n        c1 (atom 1)\n        c2 (atom 1)]\n    (doseq [p products]\n      (save-picture p (str fold uuid \&quot;_product_\&quot; @c1 \&quot;.jpg\&quot;))\n      (swap! c1 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))\n    (doseq [m models]\n      (save-picture m (str fold uuid \&quot;_model_\&quot; @c2 \&quot;.jpg\&quot;))\n      (swap! c2 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))))\n\n(defn run\n  [url fold]\n  (let [urls (get-url url)\n        u1 (first urls)\n        urls (rest urls)\n        file (str fold \&quot;meta.csv\&quot;)]\n    (to u1)\n    (Thread/sleep 5000)\n    (let [html (freeze)\n          meta (get-meta html)]\n      (write-csv-quoted [meta] file)\n      (get-picture html fold)\n      (println \&quot;Initiated!\&quot;))\n    (doseq [u urls]\n      (try\n        (to u)\n        (Thread/sleep 5000)\n        (let [html (freeze)\n              meta (get-meta html)]\n          (write-csv-quoted [meta] file :append true)\n          (get-picture html fold)\n          (println \&quot;Succeeded!\&quot;))\n        (catch Throwable e (println \&quot;OOPS!\&quot;))))))\n\n\n&quot; &quot;(run \&quot;http://www.uniqlo.cn/view_page-240793666.htm?spm=0.0.0.0.VWJV1J\&quot;\n     \&quot;C:/data/uniqlo/waitao/\&quot;)&quot; &quot;(run \&quot;http://www.uniqlo.cn/view_page-240793666.htm?spm=0.0.0.0.VWJV1J\&quot;\n     \&quot;C:/data/uniqlo/外套/\&quot;)&quot; &quot;(format \&quot;%02d\\n\&quot; 1)&quot; &quot;(format \&quot;%02\&quot; 1)&quot; &quot;(format \&quot;%02d\&quot; 1)&quot; &quot;(format \&quot;%03d\&quot; 1)&quot; &quot;(run \&quot;http://www.uniqlo.cn/view_page-683969695.htm?spm=0.0.0.0.VWJV1J#hd\&quot;\n     \&quot;C:/data/uniqlo/外套2\&quot;)&quot; &quot;(ns uniqlo.core\n  (:import (java.io ByteArrayOutputStream File InputStreamReader StringReader)\n           (javax.imageio ImageIO)\n           (java.net URL)\n           [org.openqa.selenium WebDriver Cookie OutputType TakesScreenshot]\n           [org.openqa.selenium WebElement]\n           [org.openqa.selenium.support.ui ExpectedCondition ExpectedConditions]\n           [org.openqa.selenium.support.ui WebDriverWait]\n           (org.openqa.selenium.firefox FirefoxDriver FirefoxProfile)\n           (org.openqa.selenium By)\n           (org.openqa.selenium Cookie)\n           (org.openqa.selenium JavascriptExecutor)\n           (org.openqa.selenium.htmlunit HtmlUnitDriver)\n           (org.openqa.selenium.firefox.internal ProfilesIni)\n           (java.io File)\n           (org.openqa.selenium.ie InternetExplorerDriver)\n           (org.openqa.selenium.chrome ChromeDriver)\n           (org.openqa.selenium.remote Augmenter)\n           (java.util UUID))\n  (:require [mikera.image.core :as imagez]\n            [clojure.java.io :as io]\n            [net.cgrand.enlive-html :as html]\n            [clojure.string :as string]\n            [clojure-csv.core :as clj-csv]\n            ))\n\n\n(def ^:dynamic my-driver nil)\n\n(defmacro use-firefox\n  []\n  `(def my-driver (FirefoxDriver.)))\n\n(defmacro use-htmlunit\n  []\n  `(def my-driver (HtmlUnitDriver.)))\n\n(defmacro use-ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;resources/driver/IEDriverServer.exe\&quot;)]\n    `(def my-driver (InternetExplorerDriver.))))\n\n(defmacro use-chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;resources/driver/chromedriver.exe\&quot;)]\n    `(def my-driver (ChromeDriver.))))\n\n(defn firefox\n  []\n  (FirefoxDriver.))\n\n(defn htmlunit\n  []\n  (HtmlUnitDriver.))\n\n(defn ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;C:/iedriver/IEDriverServer.exe\&quot;)]\n    (InternetExplorerDriver.)))\n\n(defn chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;C:/chromedriver/chromedriver.exe\&quot;)]\n    (ChromeDriver.)))\n\n(defn to\n  [url]\n  (.get my-driver url))\n\n(defn execute-script\n  [^String script]\n  (.executeScript ^JavascriptExecutor my-driver script (make-array Object 0)))\n\n(defn freeze\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource))\n\n(defn write-csv-quoted\n  [coll file &amp; {:keys [append encoding]}]\n  (let [keys-vec (keys (first coll))\n        vals-vecs (map (apply juxt keys-vec) coll)]\n    (with-open [out (io/writer file :append append :encoding encoding)]\n      (binding [*out* out]\n        (when-not append\n          (print (clj-csv/write-csv (vector (map name keys-vec)) :force-quote true)))\n        (doseq [v vals-vecs]\n          (let [v (map str v)]\n            (print (clj-csv/write-csv (vector v) :force-quote true))))))))\n\n(defn get-url\n  [url]\n  (let [html (html/html-resource (URL. url))\n        items (html/select html [:.permalink])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n\n(defn get-html\n  [url &amp; {:keys [encoding] :or {encoding \&quot;gbk\&quot;}}]\n  (-&gt; (URL. url)\n      .getContent\n      (InputStreamReader. encoding)\n      html/html-resource))\n\n\n(defn get-product-src\n  [html]\n  (-&gt;&gt; (html/select html [:.zoom-cache :img])\n      (map #(get-in % [:attrs :src]))))\n\n(defn get-model-src\n  [html]\n  (let [src (-&gt; (html/select html [:#J_DivItemDesc :table])\n       second\n       (html/select [:img]))]\n    (map #(get-in % [:attrs :src]) src)))\n\n(defn get-title\n  [html]\n  (-&gt; (html/select html [:.detail-hd])\n      first\n      html/text\n      string/trim))\n\n(defn get-description\n  [html]\n  (let [content (-&gt; (html/select html [:#J_DivItemDesc :table])\n                    first\n                    (html/select [:p]))]\n    (-&gt;&gt; (html/texts content)\n         (remove #(= \&quot;\&quot; %))\n         (map string/trim)\n         (string/join \&quot;////\&quot;))))\n\n(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul :li])\n       (map html/text)\n      (map string/trim)\n      (string/join \&quot;////\&quot;)\n      ))\n\n(defn save-picture\n  [url file]\n  (with-open [in (io/input-stream url)\n              out (io/output-stream file)]\n    (io/copy in out)))\n\n(defn get-meta\n  [html]\n  {:title (get-title html)\n   :description (get-description html)\n   :attribute (get-attribute html)\n   :uuid (UUID/randomUUID)})\n\n(defn get-picture\n  [html fold]\n  (let [products (get-product-src html)\n        models (get-model-src html)\n        uuid (:uuid (get-meta html))\n        c1 (atom 1)\n        c2 (atom 1)]\n    (doseq [p products]\n      (save-picture p (str fold uuid \&quot;_product_\&quot; (format \&quot;%03d\&quot; @c1) \&quot;.jpg\&quot;))\n      (swap! c1 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))\n    (doseq [m models]\n      (save-picture m (str fold uuid \&quot;_model_\&quot; (format \&quot;%03d\&quot; @c2) \&quot;.jpg\&quot;))\n      (swap! c2 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))))\n\n(defn run\n  [url fold]\n  (let [urls (get-url url)\n        u1 (first urls)\n        urls (rest urls)\n        file (str fold \&quot;meta.csv\&quot;)]\n    (to u1)\n    (Thread/sleep 5000)\n    (let [html (freeze)\n          meta (get-meta html)]\n      (write-csv-quoted [meta] file)\n      (get-picture html fold)\n      (println \&quot;Initiated!\&quot;))\n    (doseq [u urls]\n      (try\n        (to u)\n        (Thread/sleep 5000)\n        (let [html (freeze)\n              meta (get-meta html)]\n          (write-csv-quoted [meta] file :append true)\n          (get-picture html fold)\n          (println \&quot;Succeeded!\&quot;))\n        (catch Throwable e (println \&quot;OOPS!\&quot;))))))\n\n\n\n\n&quot; &quot;(run \&quot;http://www.uniqlo.cn/view_page-683969695.htm?spm=0.0.0.0.VWJV1J#hd\&quot;\n     \&quot;C:/data/uniqlo/外套2/\&quot;)&quot; &quot;(defn get-price\n  [html]\n  (-&gt; (html/select html [:#J_StrPrice])))&quot; &quot;(defn get-price\n  [html]\n  (-&gt; (html/select html [:#J_StrPrice])\n      first\n      (html/text)))&quot; &quot;(get-price (freeze))&quot; &quot;(ns uniqlo.core\n  (:import (java.io ByteArrayOutputStream File InputStreamReader StringReader)\n           (javax.imageio ImageIO)\n           (java.net URL)\n           [org.openqa.selenium WebDriver Cookie OutputType TakesScreenshot]\n           [org.openqa.selenium WebElement]\n           [org.openqa.selenium.support.ui ExpectedCondition ExpectedConditions]\n           [org.openqa.selenium.support.ui WebDriverWait]\n           (org.openqa.selenium.firefox FirefoxDriver FirefoxProfile)\n           (org.openqa.selenium By)\n           (org.openqa.selenium Cookie)\n           (org.openqa.selenium JavascriptExecutor)\n           (org.openqa.selenium.htmlunit HtmlUnitDriver)\n           (org.openqa.selenium.firefox.internal ProfilesIni)\n           (java.io File)\n           (org.openqa.selenium.ie InternetExplorerDriver)\n           (org.openqa.selenium.chrome ChromeDriver)\n           (org.openqa.selenium.remote Augmenter)\n           (java.util UUID))\n  (:require [mikera.image.core :as imagez]\n            [clojure.java.io :as io]\n            [net.cgrand.enlive-html :as html]\n            [clojure.string :as string]\n            [clojure-csv.core :as clj-csv]\n            ))\n\n\n(def ^:dynamic my-driver nil)\n\n(defmacro use-firefox\n  []\n  `(def my-driver (FirefoxDriver.)))\n\n(defmacro use-htmlunit\n  []\n  `(def my-driver (HtmlUnitDriver.)))\n\n(defmacro use-ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;resources/driver/IEDriverServer.exe\&quot;)]\n    `(def my-driver (InternetExplorerDriver.))))\n\n(defmacro use-chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;resources/driver/chromedriver.exe\&quot;)]\n    `(def my-driver (ChromeDriver.))))\n\n(defn firefox\n  []\n  (FirefoxDriver.))\n\n(defn htmlunit\n  []\n  (HtmlUnitDriver.))\n\n(defn ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;C:/iedriver/IEDriverServer.exe\&quot;)]\n    (InternetExplorerDriver.)))\n\n(defn chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;C:/chromedriver/chromedriver.exe\&quot;)]\n    (ChromeDriver.)))\n\n(defn to\n  [url]\n  (.get my-driver url))\n\n(defn execute-script\n  [^String script]\n  (.executeScript ^JavascriptExecutor my-driver script (make-array Object 0)))\n\n(defn freeze\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource))\n\n(defn write-csv-quoted\n  [coll file &amp; {:keys [append encoding]}]\n  (let [keys-vec (keys (first coll))\n        vals-vecs (map (apply juxt keys-vec) coll)]\n    (with-open [out (io/writer file :append append :encoding encoding)]\n      (binding [*out* out]\n        (when-not append\n          (print (clj-csv/write-csv (vector (map name keys-vec)) :force-quote true)))\n        (doseq [v vals-vecs]\n          (let [v (map str v)]\n            (print (clj-csv/write-csv (vector v) :force-quote true))))))))\n\n(defn get-url\n  [url]\n  (let [html (html/html-resource (URL. url))\n        items (html/select html [:.permalink])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n\n(defn get-html\n  [url &amp; {:keys [encoding] :or {encoding \&quot;gbk\&quot;}}]\n  (-&gt; (URL. url)\n      .getContent\n      (InputStreamReader. encoding)\n      html/html-resource))\n\n\n(defn get-product-src\n  [html]\n  (-&gt;&gt; (html/select html [:.zoom-cache :img])\n      (map #(get-in % [:attrs :src]))))\n\n(defn get-model-src\n  [html]\n  (let [src (-&gt; (html/select html [:#J_DivItemDesc :table])\n       second\n       (html/select [:img]))]\n    (map #(get-in % [:attrs :src]) src)))\n\n(defn get-title\n  [html]\n  (-&gt; (html/select html [:.detail-hd])\n      first\n      html/text\n      string/trim))\n\n(defn get-description\n  [html]\n  (let [content (-&gt; (html/select html [:#J_DivItemDesc :table])\n                    first\n                    (html/select [:p]))]\n    (-&gt;&gt; (html/texts content)\n         (remove #(= \&quot;\&quot; %))\n         (map string/trim)\n         (string/join \&quot;////\&quot;))))\n\n(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul :li])\n       (map html/text)\n      (map string/trim)\n      (string/join \&quot;////\&quot;)\n      ))\n\n(defn get-price\n  [html]\n  (-&gt; (html/select html [:#J_StrPrice])\n      first\n      (html/text)))\n\n(defn save-picture\n  [url file]\n  (with-open [in (io/input-stream url)\n              out (io/output-stream file)]\n    (io/copy in out)))\n\n(defn get-meta\n  [html]\n  {:uuid (UUID/randomUUID)\n   :title (get-title html)\n   :description (get-description html)\n   :attribute (get-attribute html)\n   :price (get-price html)\n   })\n\n(defn get-picture\n  [html fold]\n  (let [products (get-product-src html)\n        models (get-model-src html)\n        uuid (:uuid (get-meta html))\n        c1 (atom 1)\n        c2 (atom 1)]\n    (doseq [p products]\n      (save-picture p (str fold uuid \&quot;_product_\&quot; (format \&quot;%03d\&quot; @c1) \&quot;.jpg\&quot;))\n      (swap! c1 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))\n    (doseq [m models]\n      (save-picture m (str fold uuid \&quot;_model_\&quot; (format \&quot;%03d\&quot; @c2) \&quot;.jpg\&quot;))\n      (swap! c2 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))))\n\n(defn run\n  [url fold]\n  (let [urls (get-url url)\n        u1 (first urls)\n        urls (rest urls)\n        file (str fold \&quot;meta.csv\&quot;)]\n    (to u1)\n    (Thread/sleep 5000)\n    (let [html (freeze)\n          meta (get-meta html)]\n      (write-csv-quoted [meta] file)\n      (get-picture html fold)\n      (println \&quot;Initiated!\&quot;))\n    (doseq [u urls]\n      (try\n        (to u)\n        (Thread/sleep 5000)\n        (let [html (freeze)\n              meta (get-meta html)]\n          (write-csv-quoted [meta] file :append true)\n          (get-picture html fold)\n          (println \&quot;Succeeded!\&quot;))\n        (catch Throwable e (println \&quot;OOPS!\&quot;))))))\n\n\n\n\n&quot; &quot;(ns uniqlo.core\n  (:import (java.io ByteArrayOutputStream File InputStreamReader StringReader)\n           (javax.imageio ImageIO)\n           (java.net URL)\n           [org.openqa.selenium WebDriver Cookie OutputType TakesScreenshot]\n           [org.openqa.selenium WebElement]\n           [org.openqa.selenium.support.ui ExpectedCondition ExpectedConditions]\n           [org.openqa.selenium.support.ui WebDriverWait]\n           (org.openqa.selenium.firefox FirefoxDriver FirefoxProfile)\n           (org.openqa.selenium By)\n           (org.openqa.selenium Cookie)\n           (org.openqa.selenium JavascriptExecutor)\n           (org.openqa.selenium.htmlunit HtmlUnitDriver)\n           (org.openqa.selenium.firefox.internal ProfilesIni)\n           (java.io File)\n           (org.openqa.selenium.ie InternetExplorerDriver)\n           (org.openqa.selenium.chrome ChromeDriver)\n           (org.openqa.selenium.remote Augmenter)\n           (java.util UUID))\n  (:require [mikera.image.core :as imagez]\n            [clojure.java.io :as io]\n            [net.cgrand.enlive-html :as html]\n            [clojure.string :as string]\n            [clojure-csv.core :as clj-csv]\n            [clojure.data.csv :as csv]))\n\n\n(def ^:dynamic my-driver nil)\n\n(defmacro use-firefox\n  []\n  `(def my-driver (FirefoxDriver.)))\n\n(defmacro use-htmlunit\n  []\n  `(def my-driver (HtmlUnitDriver.)))\n\n(defmacro use-ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;resources/driver/IEDriverServer.exe\&quot;)]\n    `(def my-driver (InternetExplorerDriver.))))\n\n(defmacro use-chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;resources/driver/chromedriver.exe\&quot;)]\n    `(def my-driver (ChromeDriver.))))\n\n(defn firefox\n  []\n  (FirefoxDriver.))\n\n(defn htmlunit\n  []\n  (HtmlUnitDriver.))\n\n(defn ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;C:/iedriver/IEDriverServer.exe\&quot;)]\n    (InternetExplorerDriver.)))\n\n(defn chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;C:/chromedriver/chromedriver.exe\&quot;)]\n    (ChromeDriver.)))\n\n(defn to\n  [url]\n  (.get my-driver url))\n\n(defn execute-script\n  [^String script]\n  (.executeScript ^JavascriptExecutor my-driver script (make-array Object 0)))\n\n(defn freeze\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource))\n\n(defn write-csv-quoted\n  [coll file &amp; {:keys [append encoding]}]\n  (let [keys-vec (keys (first coll))\n        vals-vecs (map (apply juxt keys-vec) coll)]\n    (with-open [out (io/writer file :append append :encoding encoding)]\n      (binding [*out* out]\n        (when-not append\n          (print (clj-csv/write-csv (vector (map name keys-vec)) :force-quote true)))\n        (doseq [v vals-vecs]\n          (let [v (map str v)]\n            (print (clj-csv/write-csv (vector v) :force-quote true))))))))\n\n(defn lazy-read-csv\n  [csv-file]\n  (let [in-file (io/reader csv-file)\n        csv-seq (csv/read-csv in-file)\n        lazy (fn lazy [wrapped]\n               (lazy-seq\n                 (if-let [s (seq wrapped)]\n                   (cons (first s) (lazy (rest s)))\n                   (.close in-file))))]\n    (lazy csv-seq)))\n\n(defn lazy-read-csv-head-on\n  [file]\n  (let [coll (lazy-read-csv file)\n        head (map keyword (first coll))\n        rows (rest coll)]\n    (map #(zipmap head %) rows)))\n\n\n(defn get-url\n  [url]\n  (let [html (html/html-resource (URL. url))\n        items (html/select html [:.permalink])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n\n(defn get-html\n  [url &amp; {:keys [encoding] :or {encoding \&quot;gbk\&quot;}}]\n  (-&gt; (URL. url)\n      .getContent\n      (InputStreamReader. encoding)\n      html/html-resource))\n\n\n(defn get-product-src\n  [html]\n  (-&gt;&gt; (html/select html [:.zoom-cache :img])\n      (map #(get-in % [:attrs :src]))))\n\n(defn get-model-src\n  [html]\n  (let [src (-&gt; (html/select html [:#J_DivItemDesc :table])\n       second\n       (html/select [:img]))]\n    (map #(get-in % [:attrs :src]) src)))\n\n(defn get-title\n  [html]\n  (-&gt; (html/select html [:.detail-hd])\n      first\n      html/text\n      string/trim))\n\n(defn get-description\n  [html]\n  (let [content (-&gt; (html/select html [:#J_DivItemDesc :table])\n                    first\n                    (html/select [:p]))]\n    (-&gt;&gt; (html/texts content)\n         (remove #(= \&quot;\&quot; %))\n         (map string/trim)\n         (string/join \&quot;////\&quot;))))\n\n(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul :li])\n       (map html/text)\n      (map string/trim)\n      (string/join \&quot;////\&quot;)\n      ))\n\n(defn get-price\n  [html]\n  (-&gt; (html/select html [:#J_StrPrice])\n      first\n      (html/text)))\n\n(defn save-picture\n  [url file]\n  (with-open [in (io/input-stream url)\n              out (io/output-stream file)]\n    (io/copy in out)))\n\n(defn get-meta\n  [html]\n  {:uuid (UUID/randomUUID)\n   :title (get-title html)\n   :description (get-description html)\n   :attribute (get-attribute html)\n   :price (get-price html)\n   })\n\n(defn get-picture\n  [html fold]\n  (let [products (get-product-src html)\n        models (get-model-src html)\n        uuid (:uuid (get-meta html))\n        c1 (atom 1)\n        c2 (atom 1)]\n    (doseq [p products]\n      (save-picture p (str fold uuid \&quot;_product_\&quot; (format \&quot;%03d\&quot; @c1) \&quot;.jpg\&quot;))\n      (swap! c1 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))\n    (doseq [m models]\n      (save-picture m (str fold uuid \&quot;_model_\&quot; (format \&quot;%03d\&quot; @c2) \&quot;.jpg\&quot;))\n      (swap! c2 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))))\n\n(defn run\n  [url fold]\n  (let [urls (get-url url)\n        u1 (first urls)\n        urls (rest urls)\n        file (str fold \&quot;meta.csv\&quot;)]\n    (to u1)\n    (Thread/sleep 5000)\n    (let [html (freeze)\n          meta (get-meta html)]\n      (write-csv-quoted [meta] file)\n      (get-picture html fold)\n      (println \&quot;Initiated!\&quot;))\n    (doseq [u urls]\n      (try\n        (to u)\n        (Thread/sleep 5000)\n        (let [html (freeze)\n              meta (get-meta html)]\n          (write-csv-quoted [meta] file :append true)\n          (get-picture html fold)\n          (println \&quot;Succeeded!\&quot;))\n        (catch Throwable e (println \&quot;OOPS!\&quot;))))))\n\n\n\n\n&quot; &quot;(lazy-read-csv \&quot;C:/data/uniqlo/jobs.csv\&quot;)&quot; &quot;(defn start\n  []\n  (doseq [j (lazy-read-csv \&quot;C:/data/uniqlo/jobs.csv\&quot;)]\n    (run (second j) (first j))))&quot; &quot;(start)&quot; &quot;(ns uniqlo.core\n  (:import (java.io ByteArrayOutputStream File InputStreamReader StringReader)\n           (javax.imageio ImageIO)\n           (java.net URL)\n           [org.openqa.selenium WebDriver Cookie OutputType TakesScreenshot]\n           [org.openqa.selenium WebElement]\n           [org.openqa.selenium.support.ui ExpectedCondition ExpectedConditions]\n           [org.openqa.selenium.support.ui WebDriverWait]\n           (org.openqa.selenium.firefox FirefoxDriver FirefoxProfile)\n           (org.openqa.selenium By)\n           (org.openqa.selenium Cookie)\n           (org.openqa.selenium JavascriptExecutor)\n           (org.openqa.selenium.htmlunit HtmlUnitDriver)\n           (org.openqa.selenium.firefox.internal ProfilesIni)\n           (java.io File)\n           (org.openqa.selenium.ie InternetExplorerDriver)\n           (org.openqa.selenium.chrome ChromeDriver)\n           (org.openqa.selenium.remote Augmenter)\n           (java.util UUID))\n  (:require [mikera.image.core :as imagez]\n            [clojure.java.io :as io]\n            [net.cgrand.enlive-html :as html]\n            [clojure.string :as string]\n            [clojure-csv.core :as clj-csv]\n            [clojure.data.csv :as csv]))&quot; &quot;(.mkidr (io/as-file \&quot;D:/data/ceshi/\&quot;))&quot; &quot;(.mkdir (io/as-file \&quot;D:/data/ceshi/\&quot;))&quot; &quot;(ns uniqlo.core\n  (:import (java.io ByteArrayOutputStream File InputStreamReader StringReader)\n           (javax.imageio ImageIO)\n           (java.net URL)\n           [org.openqa.selenium WebDriver Cookie OutputType TakesScreenshot]\n           [org.openqa.selenium WebElement]\n           [org.openqa.selenium.support.ui ExpectedCondition ExpectedConditions]\n           [org.openqa.selenium.support.ui WebDriverWait]\n           (org.openqa.selenium.firefox FirefoxDriver FirefoxProfile)\n           (org.openqa.selenium By)\n           (org.openqa.selenium Cookie)\n           (org.openqa.selenium JavascriptExecutor)\n           (org.openqa.selenium.htmlunit HtmlUnitDriver)\n           (org.openqa.selenium.firefox.internal ProfilesIni)\n           (java.io File)\n           (org.openqa.selenium.ie InternetExplorerDriver)\n           (org.openqa.selenium.chrome ChromeDriver)\n           (org.openqa.selenium.remote Augmenter)\n           (java.util UUID))\n  (:require [mikera.image.core :as imagez]\n            [clojure.java.io :as io]\n            [net.cgrand.enlive-html :as html]\n            [clojure.string :as string]\n            [clojure-csv.core :as clj-csv]\n            [clojure.data.csv :as csv]))\n\n\n(def ^:dynamic my-driver nil)\n\n(defmacro use-firefox\n  []\n  `(def my-driver (FirefoxDriver.)))\n\n(defmacro use-htmlunit\n  []\n  `(def my-driver (HtmlUnitDriver.)))\n\n(defmacro use-ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;resources/driver/IEDriverServer.exe\&quot;)]\n    `(def my-driver (InternetExplorerDriver.))))\n\n(defmacro use-chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;resources/driver/chromedriver.exe\&quot;)]\n    `(def my-driver (ChromeDriver.))))\n\n(defn firefox\n  []\n  (FirefoxDriver.))\n\n(defn htmlunit\n  []\n  (HtmlUnitDriver.))\n\n(defn ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;C:/iedriver/IEDriverServer.exe\&quot;)]\n    (InternetExplorerDriver.)))\n\n(defn chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;C:/chromedriver/chromedriver.exe\&quot;)]\n    (ChromeDriver.)))\n\n(defn to\n  [url]\n  (.get my-driver url))\n\n(defn execute-script\n  [^String script]\n  (.executeScript ^JavascriptExecutor my-driver script (make-array Object 0)))\n\n(defn freeze\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource))\n\n(defn write-csv-quoted\n  [coll file &amp; {:keys [append encoding]}]\n  (let [keys-vec (keys (first coll))\n        vals-vecs (map (apply juxt keys-vec) coll)]\n    (with-open [out (io/writer file :append append :encoding encoding)]\n      (binding [*out* out]\n        (when-not append\n          (print (clj-csv/write-csv (vector (map name keys-vec)) :force-quote true)))\n        (doseq [v vals-vecs]\n          (let [v (map str v)]\n            (print (clj-csv/write-csv (vector v) :force-quote true))))))))\n\n(defn lazy-read-csv\n  [csv-file]\n  (let [in-file (io/reader csv-file)\n        csv-seq (csv/read-csv in-file)\n        lazy (fn lazy [wrapped]\n               (lazy-seq\n                 (if-let [s (seq wrapped)]\n                   (cons (first s) (lazy (rest s)))\n                   (.close in-file))))]\n    (lazy csv-seq)))\n\n(defn lazy-read-csv-head-on\n  [file]\n  (let [coll (lazy-read-csv file)\n        head (map keyword (first coll))\n        rows (rest coll)]\n    (map #(zipmap head %) rows)))\n\n\n(defn get-url\n  [url]\n  (let [html (html/html-resource (URL. url))\n        items (html/select html [:.permalink])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n\n(defn get-html\n  [url &amp; {:keys [encoding] :or {encoding \&quot;gbk\&quot;}}]\n  (-&gt; (URL. url)\n      .getContent\n      (InputStreamReader. encoding)\n      html/html-resource))\n\n\n(defn get-product-src\n  [html]\n  (-&gt;&gt; (html/select html [:.zoom-cache :img])\n       (map #(get-in % [:attrs :src]))))\n\n(defn get-model-src\n  [html]\n  (let [src (-&gt; (html/select html [:#J_DivItemDesc :table])\n                second\n                (html/select [:img]))]\n    (map #(get-in % [:attrs :src]) src)))\n\n(defn get-title\n  [html]\n  (-&gt; (html/select html [:.detail-hd])\n      first\n      html/text\n      string/trim))\n\n(defn get-description\n  [html]\n  (let [content (-&gt; (html/select html [:#J_DivItemDesc :table])\n                    first\n                    (html/select [:p]))]\n    (-&gt;&gt; (html/texts content)\n         (remove #(= \&quot;\&quot; %))\n         (map string/trim)\n         (string/join \&quot;////\&quot;))))\n\n(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul :li])\n       (map html/text)\n       (map string/trim)\n       (string/join \&quot;////\&quot;)\n       ))\n\n(defn get-price\n  [html]\n  (-&gt; (html/select html [:#J_StrPrice])\n      first\n      (html/text)))\n\n(defn save-picture\n  [url file]\n  (with-open [in (io/input-stream url)\n              out (io/output-stream file)]\n    (io/copy in out)))\n\n(defn get-meta\n  [html]\n  {:uuid        (UUID/randomUUID)\n   :title       (get-title html)\n   :description (get-description html)\n   :attribute   (get-attribute html)\n   :price       (get-price html)\n   })\n\n(defn get-picture\n  [html fold]\n  (let [products (get-product-src html)\n        models (get-model-src html)\n        uuid (:uuid (get-meta html))\n        c1 (atom 1)\n        c2 (atom 1)]\n    (doseq [p products]\n      (save-picture p (str fold uuid \&quot;_product_\&quot; (format \&quot;%03d\&quot; @c1) \&quot;.jpg\&quot;))\n      (swap! c1 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))\n    (doseq [m models]\n      (save-picture m (str fold uuid \&quot;_model_\&quot; (format \&quot;%03d\&quot; @c2) \&quot;.jpg\&quot;))\n      (swap! c2 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))))\n\n(defn run\n  [url fold]\n  (let [urls (get-url url)\n        u1 (first urls)\n        urls (rest urls)\n        file (str fold \&quot;meta.csv\&quot;)]\n    (to u1)\n    (Thread/sleep 5000)\n    (let [html (freeze)\n          meta (get-meta html)]\n      (write-csv-quoted [meta] file)\n      (get-picture html fold)\n      (println \&quot;Initiated!\&quot;))\n    (doseq [u urls]\n      (try\n        (to u)\n        (Thread/sleep 5000)\n        (let [html (freeze)\n              meta (get-meta html)]\n          (write-csv-quoted [meta] file :append true)\n          (get-picture html fold)\n          (println \&quot;Succeeded!\&quot;))\n        (catch Throwable e (println \&quot;OOPS!\&quot;))))))\n\n\n(defn start\n  [fold]\n  (doseq [j (lazy-read-csv \&quot;C:/data/uniqlo/jobs.csv\&quot;)]\n    (.mkdir (io/as-file (str fold (first j) \&quot;/\&quot;)))\n    (run (second j) (str fold (first j) \&quot;/\&quot;))))\n&quot; &quot;(.mkdir (io/as-file \&quot;C:/data/ceshi/\&quot;))&quot; &quot;(start \&quot;D:/data/uniqlo/\&quot;)&quot; &quot;(defn start\n  [fold]\n  (doseq [j (lazy-read-csv \&quot;C:/data/uniqlo/jobs.csv\&quot;)]\n    (.mkdir (io/as-file (str fold (first j) \&quot;/\&quot;)))\n    ;(run (second j) (str fold (first j) \&quot;/\&quot;))\n    ))&quot; &quot;(defn start\n  [fold]\n  (doseq [j (lazy-read-csv \&quot;C:/data/uniqlo/jobs.csv\&quot;)]\n    (.mkdir (io/as-file (str fold (first j) \&quot;/\&quot;)))\n    (run (second j) (str fold (first j) \&quot;/\&quot;))\n    ))&quot; &quot;(defn start\n  [fold]\n  (doseq [j (drop 6 (lazy-read-csv \&quot;C:/data/uniqlo/jobs.csv\&quot;))]\n    (.mkdir (io/as-file (str fold (first j) \&quot;/\&quot;)))\n    (run (second j) (str fold (first j) \&quot;/\&quot;))\n    ))&quot; &quot;(defn start\n  [fold]\n  (doseq [j (drop 7 (lazy-read-csv \&quot;C:/data/uniqlo/jobs.csv\&quot;))]\n    (.mkdir (io/as-file (str fold (first j) \&quot;/\&quot;)))\n    (run (second j) (str fold (first j) \&quot;/\&quot;))\n    ))&quot; &quot;(start \&quot;C:/data/uniqlo/\&quot;)&quot; &quot;(defn get-url2\n  [html]\n  (let [items (html/select html [:.permalink])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))&quot; &quot;(defn get-url2\n  [html]\n  (let [items (html/select html [:.mian_list :img])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))&quot; &quot;(defn get-url2\n  [html]\n  (let [items (html/select html [:.mian_list :img])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)\n    items))&quot; &quot;(defn get-url2\n  [html]\n  (let [items (html/select html [:.main_list :img])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)\n    items))&quot; &quot;(defn get-url2\n  [html]\n  (let [items (html/select html [:.main_list :img])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))&quot; &quot;(defn get-url2\n  [html]\n  (let [items (html/select html [:.main_list :img])]\n    (-&gt; (map #(get-in % [:attrs :src]) items)\n        distinct)))&quot; &quot;a&quot; &quot;(defn get-url2\n  [html]\n  (let [items (html/select html [:.main-wrap :a])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))&quot; &quot;(ns uniqlo.core\n  (:import (java.io ByteArrayOutputStream File InputStreamReader StringReader)\n           (javax.imageio ImageIO)\n           (java.net URL)\n           [org.openqa.selenium WebDriver Cookie OutputType TakesScreenshot]\n           [org.openqa.selenium WebElement]\n           [org.openqa.selenium.support.ui ExpectedCondition ExpectedConditions]\n           [org.openqa.selenium.support.ui WebDriverWait]\n           (org.openqa.selenium.firefox FirefoxDriver FirefoxProfile)\n           (org.openqa.selenium By)\n           (org.openqa.selenium Cookie)\n           (org.openqa.selenium JavascriptExecutor)\n           (org.openqa.selenium.htmlunit HtmlUnitDriver)\n           (org.openqa.selenium.firefox.internal ProfilesIni)\n           (java.io File)\n           (org.openqa.selenium.ie InternetExplorerDriver)\n           (org.openqa.selenium.chrome ChromeDriver)\n           (org.openqa.selenium.remote Augmenter)\n           (java.util UUID))\n  (:require [mikera.image.core :as imagez]\n            [clojure.java.io :as io]\n            [net.cgrand.enlive-html :as html]\n            [clojure.string :as string]\n            [clojure-csv.core :as clj-csv]\n            [clojure.data.csv :as csv]))\n\n\n(def ^:dynamic my-driver nil)\n\n(defmacro use-firefox\n  []\n  `(def my-driver (FirefoxDriver.)))\n\n(defmacro use-htmlunit\n  []\n  `(def my-driver (HtmlUnitDriver.)))\n\n(defmacro use-ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;resources/driver/IEDriverServer.exe\&quot;)]\n    `(def my-driver (InternetExplorerDriver.))))\n\n(defmacro use-chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;resources/driver/chromedriver.exe\&quot;)]\n    `(def my-driver (ChromeDriver.))))\n\n(defn firefox\n  []\n  (FirefoxDriver.))\n\n(defn htmlunit\n  []\n  (HtmlUnitDriver.))\n\n(defn ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;C:/iedriver/IEDriverServer.exe\&quot;)]\n    (InternetExplorerDriver.)))\n\n(defn chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;C:/chromedriver/chromedriver.exe\&quot;)]\n    (ChromeDriver.)))\n\n(defn to\n  [url]\n  (.get my-driver url))\n\n(defn execute-script\n  [^String script]\n  (.executeScript ^JavascriptExecutor my-driver script (make-array Object 0)))\n\n(defn freeze\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource))\n\n(defn write-csv-quoted\n  [coll file &amp; {:keys [append encoding]}]\n  (let [keys-vec (keys (first coll))\n        vals-vecs (map (apply juxt keys-vec) coll)]\n    (with-open [out (io/writer file :append append :encoding encoding)]\n      (binding [*out* out]\n        (when-not append\n          (print (clj-csv/write-csv (vector (map name keys-vec)) :force-quote true)))\n        (doseq [v vals-vecs]\n          (let [v (map str v)]\n            (print (clj-csv/write-csv (vector v) :force-quote true))))))))\n\n(defn lazy-read-csv\n  [csv-file]\n  (let [in-file (io/reader csv-file)\n        csv-seq (csv/read-csv in-file)\n        lazy (fn lazy [wrapped]\n               (lazy-seq\n                 (if-let [s (seq wrapped)]\n                   (cons (first s) (lazy (rest s)))\n                   (.close in-file))))]\n    (lazy csv-seq)))\n\n(defn lazy-read-csv-head-on\n  [file]\n  (let [coll (lazy-read-csv file)\n        head (map keyword (first coll))\n        rows (rest coll)]\n    (map #(zipmap head %) rows)))\n\n\n(defn get-url\n  [url]\n  (let [html (html/html-resource (URL. url))\n        items (html/select html [:.permalink])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n(defn get-url2\n  [html]\n  (let [items (html/select html [:.main-wrap :a])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n\n(defn get-html\n  [url &amp; {:keys [encoding] :or {encoding \&quot;gbk\&quot;}}]\n  (-&gt; (URL. url)\n      .getContent\n      (InputStreamReader. encoding)\n      html/html-resource))\n\n\n(defn get-product-src\n  [html]\n  (-&gt;&gt; (html/select html [:.zoom-cache :img])\n       (map #(get-in % [:attrs :src]))))\n\n(defn get-model-src\n  [html]\n  (let [src (-&gt; (html/select html [:#J_DivItemDesc :table])\n                second\n                (html/select [:img]))]\n    (map #(get-in % [:attrs :src]) src)))\n\n(defn get-title\n  [html]\n  (-&gt; (html/select html [:.detail-hd])\n      first\n      html/text\n      string/trim))\n\n(defn get-description\n  [html]\n  (let [content (-&gt; (html/select html [:#J_DivItemDesc :table])\n                    first\n                    (html/select [:p]))]\n    (-&gt;&gt; (html/texts content)\n         (remove #(= \&quot;\&quot; %))\n         (map string/trim)\n         (string/join \&quot;////\&quot;))))\n\n(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul :li])\n       (map html/text)\n       (map string/trim)\n       (string/join \&quot;////\&quot;)\n       ))\n\n(defn get-price\n  [html]\n  (-&gt; (html/select html [:#J_StrPrice])\n      first\n      (html/text)))\n\n(defn save-picture\n  [url file]\n  (with-open [in (io/input-stream url)\n              out (io/output-stream file)]\n    (io/copy in out)))\n\n(defn get-meta\n  [html]\n  {:uuid        (UUID/randomUUID)\n   :title       (get-title html)\n   :description (get-description html)\n   :attribute   (get-attribute html)\n   :price       (get-price html)\n   })\n\n(defn get-picture\n  [html fold]\n  (let [products (get-product-src html)\n        models (get-model-src html)\n        uuid (:uuid (get-meta html))\n        c1 (atom 1)\n        c2 (atom 1)]\n    (doseq [p products]\n      (save-picture p (str fold uuid \&quot;_product_\&quot; (format \&quot;%03d\&quot; @c1) \&quot;.jpg\&quot;))\n      (swap! c1 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))\n    (doseq [m models]\n      (save-picture m (str fold uuid \&quot;_model_\&quot; (format \&quot;%03d\&quot; @c2) \&quot;.jpg\&quot;))\n      (swap! c2 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))))\n\n(defn run\n  [url fold]\n  (let [urls (get-url url)\n        u1 (first urls)\n        urls (rest urls)\n        file (str fold \&quot;meta.csv\&quot;)]\n    (to u1)\n    (Thread/sleep 5000)\n    (let [html (freeze)\n          meta (get-meta html)]\n      (write-csv-quoted [meta] file)\n      (get-picture html fold)\n      (println \&quot;Initiated!\&quot;))\n    (doseq [u urls]\n      (try\n        (to u)\n        (Thread/sleep 5000)\n        (let [html (freeze)\n              meta (get-meta html)]\n          (write-csv-quoted [meta] file :append true)\n          (get-picture html fold)\n          (println \&quot;Succeeded!\&quot;))\n        (catch Throwable e (println \&quot;OOPS!\&quot;))))))\n\n\n(defn start\n  [fold]\n  (doseq [j (drop 7 (lazy-read-csv \&quot;C:/data/uniqlo/jobs.csv\&quot;))]\n    (.mkdir (io/as-file (str fold (first j) \&quot;/\&quot;)))\n    (run (second j) (str fold (first j) \&quot;/\&quot;))\n    ))\n&quot; &quot;(defn run2\n  [urls fold]\n  (let [u1 (first urls)\n        urls (rest urls)\n        file (str fold \&quot;meta.csv\&quot;)]\n    (to u1)\n    (Thread/sleep 5000)\n    (let [html (freeze)\n          meta (get-meta html)]\n      (write-csv-quoted [meta] file)\n      (get-picture html fold)\n      (println \&quot;Initiated!\&quot;))\n    (doseq [u urls]\n      (try\n        (to u)\n        (Thread/sleep 5000)\n        (let [html (freeze)\n              meta (get-meta html)]\n          (write-csv-quoted [meta] file :append true)\n          (get-picture html fold)\n          (println \&quot;Succeeded!\&quot;))\n        (catch Throwable e (println \&quot;OOPS!\&quot;))))))&quot; &quot;(use-firefox)&quot; &quot;(to \&quot;http://www.uniqlo.cn/view_page-157481823.htm?spm=0.0.0.0.VWJV1J\&quot;)&quot; &quot;(get-url2 (freeze))&quot; &quot;(def a *1)&quot; &quot;(run2 a \&quot;C:/data/uniqlo/衬衫3/\&quot;)&quot; &quot;(firefox)&quot; &quot;(run \&quot;http://www.uniqlo.cn/view_page-273680180.htm?spm=0.0.0.0.Hym3yL\&quot;\n     \&quot;C:/data/uniqlo2\&quot;)&quot; &quot;(binding [my-driver (firefox)]\n  (run \&quot;http://www.uniqlo.cn/view_page-273680180.htm?spm=0.0.0.0.Hym3yL\&quot;\n       \&quot;C:/data/uniqlo2\&quot;))&quot; &quot;(binding [my-driver (firefox)]\n  (run \&quot;http://www.uniqlo.cn/view_page-273680180.htm?spm=0.0.0.0.Hym3yL\&quot;\n       \&quot;C:/data/uniqlo2/\&quot;))&quot; &quot;(ns uniqlo.core\n  (:import (java.io ByteArrayOutputStream File InputStreamReader StringReader)\n           (javax.imageio ImageIO)\n           (java.net URL)\n           [org.openqa.selenium WebDriver Cookie OutputType TakesScreenshot]\n           [org.openqa.selenium WebElement]\n           [org.openqa.selenium.support.ui ExpectedCondition ExpectedConditions]\n           [org.openqa.selenium.support.ui WebDriverWait]\n           (org.openqa.selenium.firefox FirefoxDriver FirefoxProfile)\n           (org.openqa.selenium By)\n           (org.openqa.selenium Cookie)\n           (org.openqa.selenium JavascriptExecutor)\n           (org.openqa.selenium.htmlunit HtmlUnitDriver)\n           (org.openqa.selenium.firefox.internal ProfilesIni)\n           (java.io File)\n           (org.openqa.selenium.ie InternetExplorerDriver)\n           (org.openqa.selenium.chrome ChromeDriver)\n           (org.openqa.selenium.remote Augmenter)\n           (java.util UUID))\n  (:require [mikera.image.core :as imagez]\n            [clojure.java.io :as io]\n            [net.cgrand.enlive-html :as html]\n            [clojure.string :as string]\n            [clojure-csv.core :as clj-csv]\n            [clojure.data.csv :as csv]))\n\n\n(def ^:dynamic my-driver nil)\n\n(defmacro use-firefox\n  []\n  `(def my-driver (FirefoxDriver.)))\n\n(defmacro use-htmlunit\n  []\n  `(def my-driver (HtmlUnitDriver.)))\n\n(defmacro use-ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;resources/driver/IEDriverServer.exe\&quot;)]\n    `(def my-driver (InternetExplorerDriver.))))\n\n(defmacro use-chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;resources/driver/chromedriver.exe\&quot;)]\n    `(def my-driver (ChromeDriver.))))\n\n(defn firefox\n  []\n  (FirefoxDriver.))\n\n(defn htmlunit\n  []\n  (HtmlUnitDriver.))\n\n(defn ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;C:/iedriver/IEDriverServer.exe\&quot;)]\n    (InternetExplorerDriver.)))\n\n(defn chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;C:/chromedriver/chromedriver.exe\&quot;)]\n    (ChromeDriver.)))\n\n(defn to\n  [url]\n  (.get my-driver url))\n\n(defn execute-script\n  [^String script]\n  (.executeScript ^JavascriptExecutor my-driver script (make-array Object 0)))\n\n(defn freeze\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource))\n\n(defn write-csv-quoted\n  [coll file &amp; {:keys [append encoding]}]\n  (let [keys-vec (keys (first coll))\n        vals-vecs (map (apply juxt keys-vec) coll)]\n    (with-open [out (io/writer file :append append :encoding encoding)]\n      (binding [*out* out]\n        (when-not append\n          (print (clj-csv/write-csv (vector (map name keys-vec)) :force-quote true)))\n        (doseq [v vals-vecs]\n          (let [v (map str v)]\n            (print (clj-csv/write-csv (vector v) :force-quote true))))))))\n\n(defn lazy-read-csv\n  [csv-file]\n  (let [in-file (io/reader csv-file)\n        csv-seq (csv/read-csv in-file)\n        lazy (fn lazy [wrapped]\n               (lazy-seq\n                 (if-let [s (seq wrapped)]\n                   (cons (first s) (lazy (rest s)))\n                   (.close in-file))))]\n    (lazy csv-seq)))\n\n(defn lazy-read-csv-head-on\n  [file]\n  (let [coll (lazy-read-csv file)\n        head (map keyword (first coll))\n        rows (rest coll)]\n    (map #(zipmap head %) rows)))\n\n\n(defn get-url\n  [url]\n  (let [html (html/html-resource (URL. url))\n        items (html/select html [:.permalink])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n(defn get-url2\n  [html]\n  (let [items (html/select html [:.main-wrap :a])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n\n(defn get-html\n  [url &amp; {:keys [encoding] :or {encoding \&quot;gbk\&quot;}}]\n  (-&gt; (URL. url)\n      .getContent\n      (InputStreamReader. encoding)\n      html/html-resource))\n\n\n(defn get-product-src\n  [html]\n  (-&gt;&gt; (html/select html [:.zoom-cache :img])\n       (map #(get-in % [:attrs :src]))))\n\n(defn get-model-src\n  [html]\n  (let [src (-&gt; (html/select html [:#J_DivItemDesc :table])\n                second\n                (html/select [:img]))]\n    (map #(get-in % [:attrs :src]) src)))\n\n(defn get-title\n  [html]\n  (-&gt; (html/select html [:.detail-hd])\n      first\n      html/text\n      string/trim))\n\n(defn get-description\n  [html]\n  (let [content (-&gt; (html/select html [:#J_DivItemDesc :table])\n                    first\n                    (html/select [:p]))]\n    (-&gt;&gt; (html/texts content)\n         (remove #(= \&quot;\&quot; %))\n         (map string/trim)\n         (string/join \&quot;////\&quot;))))\n\n(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul :li])\n       (map html/text)\n       (map string/trim)\n       (string/join \&quot;////\&quot;)\n       ))\n\n(defn get-price\n  [html]\n  (-&gt; (html/select html [:#J_StrPrice])\n      first\n      (html/text)))\n\n(defn save-picture\n  [url file]\n  (with-open [in (io/input-stream url)\n              out (io/output-stream file)]\n    (io/copy in out)))\n\n(defn get-meta\n  [html]\n  {:uuid        (UUID/randomUUID)\n   :title       (get-title html)\n   :description (get-description html)\n   :attribute   (get-attribute html)\n   :price       (get-price html)\n   })\n\n(defn get-picture\n  [html fold meta]\n  (let [products (get-product-src html)\n        models (get-model-src html)\n        uuid (:uuid meta)\n        c1 (atom 1)\n        c2 (atom 1)]\n    (doseq [p products]\n      (save-picture p (str fold uuid \&quot;_product_\&quot; (format \&quot;%03d\&quot; @c1) \&quot;.jpg\&quot;))\n      (swap! c1 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))\n    (doseq [m models]\n      (save-picture m (str fold uuid \&quot;_model_\&quot; (format \&quot;%03d\&quot; @c2) \&quot;.jpg\&quot;))\n      (swap! c2 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))))\n\n(defn run\n  [url fold]\n  (let [urls (get-url url)\n        u1 (first urls)\n        urls (rest urls)\n        file (str fold \&quot;meta.csv\&quot;)]\n    (to u1)\n    (Thread/sleep 5000)\n    (let [html (freeze)\n          meta (get-meta html)]\n      (write-csv-quoted [meta] file)\n      (get-picture html fold meta)\n      (println \&quot;Initiated!\&quot;))\n    (doseq [u urls]\n      (try\n        (to u)\n        (Thread/sleep 5000)\n        (let [html (freeze)\n              meta (get-meta html)]\n          (write-csv-quoted [meta] file :append true)\n          (get-picture html fold meta)\n          (println \&quot;Succeeded!\&quot;))\n        (catch Throwable e (println \&quot;OOPS!\&quot;))))))\n\n\n(defn start\n  [fold]\n  (doseq [j (drop 7 (lazy-read-csv \&quot;C:/data/uniqlo/jobs.csv\&quot;))]\n    (.mkdir (io/as-file (str fold (first j) \&quot;/\&quot;)))\n    (run (second j) (str fold (first j) \&quot;/\&quot;))\n    ))\n&quot; &quot;(binding [my-driver (firefox)]\n  (run \&quot;http://www.uniqlo.cn/view_page-273680180.htm?spm=0.0.0.0.Hym3yL\&quot;\n     \&quot;C:/data/uniqlo2/\&quot;))&quot; &quot;(ns uniqlo.core\n  (:import (java.io ByteArrayOutputStream File InputStreamReader StringReader)\n           (javax.imageio ImageIO)\n           (java.net URL)\n           [org.openqa.selenium WebDriver Cookie OutputType TakesScreenshot]\n           [org.openqa.selenium WebElement]\n           [org.openqa.selenium.support.ui ExpectedCondition ExpectedConditions]\n           [org.openqa.selenium.support.ui WebDriverWait]\n           (org.openqa.selenium.firefox FirefoxDriver FirefoxProfile)\n           (org.openqa.selenium By)\n           (org.openqa.selenium Cookie)\n           (org.openqa.selenium JavascriptExecutor)\n           (org.openqa.selenium.htmlunit HtmlUnitDriver)\n           (org.openqa.selenium.firefox.internal ProfilesIni)\n           (java.io File)\n           (org.openqa.selenium.ie InternetExplorerDriver)\n           (org.openqa.selenium.chrome ChromeDriver)\n           (org.openqa.selenium.remote Augmenter)\n           (java.util UUID))\n  (:require [mikera.image.core :as imagez]\n            [clojure.java.io :as io]\n            [net.cgrand.enlive-html :as html]\n            [clojure.string :as string]\n            [clojure-csv.core :as clj-csv]\n            [clojure.data.csv :as csv]))\n\n\n(def ^:dynamic my-driver nil)\n\n(defmacro use-firefox\n  []\n  `(def my-driver (FirefoxDriver.)))\n\n(defmacro use-htmlunit\n  []\n  `(def my-driver (HtmlUnitDriver.)))\n\n(defmacro use-ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;resources/driver/IEDriverServer.exe\&quot;)]\n    `(def my-driver (InternetExplorerDriver.))))\n\n(defmacro use-chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;resources/driver/chromedriver.exe\&quot;)]\n    `(def my-driver (ChromeDriver.))))\n\n(defn firefox\n  []\n  (FirefoxDriver.))\n\n(defn htmlunit\n  []\n  (HtmlUnitDriver.))\n\n(defn ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;C:/iedriver/IEDriverServer.exe\&quot;)]\n    (InternetExplorerDriver.)))\n\n(defn chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;C:/chromedriver/chromedriver.exe\&quot;)]\n    (ChromeDriver.)))\n\n(defn to\n  [url]\n  (.get my-driver url))\n\n(defn execute-script\n  [^String script]\n  (.executeScript ^JavascriptExecutor my-driver script (make-array Object 0)))\n\n(defn freeze\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource))\n\n(defn write-csv-quoted\n  [coll file &amp; {:keys [append encoding]}]\n  (let [keys-vec (keys (first coll))\n        vals-vecs (map (apply juxt keys-vec) coll)]\n    (with-open [out (io/writer file :append append :encoding encoding)]\n      (binding [*out* out]\n        (when-not append\n          (print (clj-csv/write-csv (vector (map name keys-vec)) :force-quote true)))\n        (doseq [v vals-vecs]\n          (let [v (map str v)]\n            (print (clj-csv/write-csv (vector v) :force-quote true))))))))\n\n(defn lazy-read-csv\n  [csv-file]\n  (let [in-file (io/reader csv-file)\n        csv-seq (csv/read-csv in-file)\n        lazy (fn lazy [wrapped]\n               (lazy-seq\n                 (if-let [s (seq wrapped)]\n                   (cons (first s) (lazy (rest s)))\n                   (.close in-file))))]\n    (lazy csv-seq)))\n\n(defn lazy-read-csv-head-on\n  [file]\n  (let [coll (lazy-read-csv file)\n        head (map keyword (first coll))\n        rows (rest coll)]\n    (map #(zipmap head %) rows)))\n\n\n(defn get-url\n  [url]\n  (let [html (html/html-resource (URL. url))\n        items (html/select html [:.permalink])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n(defn get-url2\n  [html]\n  (let [items (html/select html [:.main-wrap :a])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n\n(defn get-html\n  [url &amp; {:keys [encoding] :or {encoding \&quot;gbk\&quot;}}]\n  (-&gt; (URL. url)\n      .getContent\n      (InputStreamReader. encoding)\n      html/html-resource))\n\n\n(defn get-product-src\n  [html]\n  (-&gt;&gt; (html/select html [:.zoom-cache :img])\n       (map #(get-in % [:attrs :src]))))\n\n(defn get-model-src\n  [html]\n  (let [src (-&gt; (html/select html [:#J_DivItemDesc :table])\n                second\n                (html/select [:img]))]\n    (map #(get-in % [:attrs :src]) src)))\n\n(defn get-title\n  [html]\n  (-&gt; (html/select html [:.detail-hd])\n      first\n      html/text\n      string/trim))\n\n(defn get-description\n  [html]\n  (let [content (-&gt; (html/select html [:#J_DivItemDesc :table])\n                    first\n                    (html/select [:p]))]\n    (-&gt;&gt; (html/texts content)\n         (remove #(= \&quot;\&quot; %))\n         (map string/trim)\n         (string/join \&quot;////\&quot;))))\n\n(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul :li])\n       (map html/text)\n       (map string/trim)\n       (string/join \&quot;////\&quot;)\n       ))\n\n(defn get-price\n  [html]\n  (-&gt; (html/select html [:#J_StrPrice])\n      first\n      (html/text)))\n\n(defn save-picture\n  [url file]\n  (with-open [in (io/input-stream url)\n              out (io/output-stream file)]\n    (io/copy in out)))\n\n(defn get-meta\n  [html]\n  {:uuid        (UUID/randomUUID)\n   :title       (get-title html)\n   :description (get-description html)\n   :attribute   (get-attribute html)\n   :price       (get-price html)\n   })\n\n(defn get-picture\n  [html fold meta]\n  (let [products (get-product-src html)\n        models (get-model-src html)\n        uuid (:uuid meta)\n        c1 (atom 1)\n        c2 (atom 1)]\n    (doseq [p products]\n      (save-picture p (str fold uuid \&quot;_product_\&quot; (format \&quot;%03d\&quot; @c1) \&quot;.jpg\&quot;))\n      (swap! c1 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))\n    (doseq [m models]\n      (save-picture m (str fold uuid \&quot;_model_\&quot; (format \&quot;%03d\&quot; @c2) \&quot;.jpg\&quot;))\n      (swap! c2 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))))\n\n(defn run\n  [url fold]\n  (let [urls (get-url url)\n        u1 (first urls)\n        urls (rest urls)\n        file (str fold \&quot;meta.csv\&quot;)]\n    (to u1)\n    (Thread/sleep 5000)\n    (let [html (freeze)\n          meta (get-meta html)]\n      (write-csv-quoted [meta] file)\n      (get-picture html fold meta)\n      (println \&quot;Initiated!\&quot;))\n    (doseq [u urls]\n      (try\n        (to u)\n        (Thread/sleep 5000)\n        (let [html (freeze)\n              meta (get-meta html)]\n          (write-csv-quoted [meta] file :append true)\n          (get-picture html fold meta)\n          (println \&quot;Succeeded!\&quot;))\n        (catch Throwable e (println \&quot;OOPS!\&quot;))))))\n\n(defn smart-run\n  [url fold]\n  (binding [my-driver (firefox)]\n    (run url fold)))\n\n\n(defn start\n  [job fold]\n  (doseq [j (drop 7 (lazy-read-csv job))]\n    (.mkdir (io/as-file (str fold (first j) \&quot;/\&quot;)))\n    (run (second j) (str fold (first j) \&quot;/\&quot;))\n    ))\n\n(defn smart-start\n  [job fold]\n  (binding [my-driver (firefox)]\n    (start job fold)))\n&quot; &quot;(smart-run \&quot;http://www.uniqlo.cn/search.htm?spm=0.0.0.0.Hym3yL&amp;search=y&amp;scid=315964625&amp;keyword=%D0%F4&amp;viewType=grid&amp;orderType=_newOn\&quot;\n           \&quot;testtesttest\&quot;)&quot; &quot;(smart-run \&quot;http://www.uniqlo.cn/search.htm?spm=0.0.0.0.Hym3yL&amp;search=y&amp;scid=315964625&amp;keyword=%D0%F4&amp;viewType=grid&amp;orderType=_newOn\&quot;\n           \&quot;C:/data/testtesttest/\&quot;)&quot; &quot;(smart-start \&quot;C:/data/wawa.csv\&quot; \&quot;C:/data/testwawa\&quot;)&quot; &quot;(smart-start \&quot;C:/data/wawa.csv\&quot; \&quot;C:/data/testwawab/\&quot;)&quot; &quot;(ns uniqlo.core\n  (:import (java.io ByteArrayOutputStream File InputStreamReader StringReader)\n           (javax.imageio ImageIO)\n           (java.net URL)\n           [org.openqa.selenium WebDriver Cookie OutputType TakesScreenshot]\n           [org.openqa.selenium WebElement]\n           [org.openqa.selenium.support.ui ExpectedCondition ExpectedConditions]\n           [org.openqa.selenium.support.ui WebDriverWait]\n           (org.openqa.selenium.firefox FirefoxDriver FirefoxProfile)\n           (org.openqa.selenium By)\n           (org.openqa.selenium Cookie)\n           (org.openqa.selenium JavascriptExecutor)\n           (org.openqa.selenium.htmlunit HtmlUnitDriver)\n           (org.openqa.selenium.firefox.internal ProfilesIni)\n           (java.io File)\n           (org.openqa.selenium.ie InternetExplorerDriver)\n           (org.openqa.selenium.chrome ChromeDriver)\n           (org.openqa.selenium.remote Augmenter)\n           (java.util UUID))\n  (:require [mikera.image.core :as imagez]\n            [clojure.java.io :as io]\n            [net.cgrand.enlive-html :as html]\n            [clojure.string :as string]\n            [clojure-csv.core :as clj-csv]\n            [clojure.data.csv :as csv]))\n\n\n(def ^:dynamic my-driver nil)\n\n(defmacro use-firefox\n  []\n  `(def my-driver (FirefoxDriver.)))\n\n(defmacro use-htmlunit\n  []\n  `(def my-driver (HtmlUnitDriver.)))\n\n(defmacro use-ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;resources/driver/IEDriverServer.exe\&quot;)]\n    `(def my-driver (InternetExplorerDriver.))))\n\n(defmacro use-chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;resources/driver/chromedriver.exe\&quot;)]\n    `(def my-driver (ChromeDriver.))))\n\n(defn firefox\n  []\n  (FirefoxDriver.))\n\n(defn htmlunit\n  []\n  (HtmlUnitDriver.))\n\n(defn ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;C:/iedriver/IEDriverServer.exe\&quot;)]\n    (InternetExplorerDriver.)))\n\n(defn chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;C:/chromedriver/chromedriver.exe\&quot;)]\n    (ChromeDriver.)))\n\n(defn to\n  [url]\n  (.get my-driver url))\n\n(defn execute-script\n  [^String script]\n  (.executeScript ^JavascriptExecutor my-driver script (make-array Object 0)))\n\n(defn freeze\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource))\n\n(defn write-csv-quoted\n  [coll file &amp; {:keys [append encoding]}]\n  (let [keys-vec (keys (first coll))\n        vals-vecs (map (apply juxt keys-vec) coll)]\n    (with-open [out (io/writer file :append append :encoding encoding)]\n      (binding [*out* out]\n        (when-not append\n          (print (clj-csv/write-csv (vector (map name keys-vec)) :force-quote true)))\n        (doseq [v vals-vecs]\n          (let [v (map str v)]\n            (print (clj-csv/write-csv (vector v) :force-quote true))))))))\n\n(defn lazy-read-csv\n  [csv-file]\n  (let [in-file (io/reader csv-file)\n        csv-seq (csv/read-csv in-file)\n        lazy (fn lazy [wrapped]\n               (lazy-seq\n                 (if-let [s (seq wrapped)]\n                   (cons (first s) (lazy (rest s)))\n                   (.close in-file))))]\n    (lazy csv-seq)))\n\n(defn lazy-read-csv-head-on\n  [file]\n  (let [coll (lazy-read-csv file)\n        head (map keyword (first coll))\n        rows (rest coll)]\n    (map #(zipmap head %) rows)))\n\n\n(defn get-url\n  [url]\n  (let [html (html/html-resource (URL. url))\n        items (html/select html [:.permalink])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n(defn get-url2\n  [html]\n  (let [items (html/select html [:.main-wrap :a])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n\n(defn get-html\n  [url &amp; {:keys [encoding] :or {encoding \&quot;gbk\&quot;}}]\n  (-&gt; (URL. url)\n      .getContent\n      (InputStreamReader. encoding)\n      html/html-resource))\n\n\n(defn get-product-src\n  [html]\n  (-&gt;&gt; (html/select html [:.zoom-cache :img])\n       (map #(get-in % [:attrs :src]))))\n\n(defn get-model-src\n  [html]\n  (let [src (-&gt; (html/select html [:#J_DivItemDesc :table])\n                second\n                (html/select [:img]))]\n    (map #(get-in % [:attrs :src]) src)))\n\n(defn get-title\n  [html]\n  (-&gt; (html/select html [:.detail-hd])\n      first\n      html/text\n      string/trim))\n\n(defn get-description\n  [html]\n  (let [content (-&gt; (html/select html [:#J_DivItemDesc :table])\n                    first\n                    (html/select [:p]))]\n    (-&gt;&gt; (html/texts content)\n         (remove #(= \&quot;\&quot; %))\n         (map string/trim)\n         (string/join \&quot;////\&quot;))))\n\n(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul :li])\n       (map html/text)\n       (map string/trim)\n       (string/join \&quot;////\&quot;)\n       ))\n\n(defn get-price\n  [html]\n  (-&gt; (html/select html [:#J_StrPrice])\n      first\n      (html/text)))\n\n(defn save-picture\n  [url file]\n  (with-open [in (io/input-stream url)\n              out (io/output-stream file)]\n    (io/copy in out)))\n\n(defn get-meta\n  [html]\n  {:uuid        (UUID/randomUUID)\n   :title       (get-title html)\n   :description (get-description html)\n   :attribute   (get-attribute html)\n   :price       (get-price html)\n   })\n\n(defn get-picture\n  [html fold meta]\n  (let [products (get-product-src html)\n        models (get-model-src html)\n        uuid (:uuid meta)\n        c1 (atom 1)\n        c2 (atom 1)]\n    (doseq [p products]\n      (save-picture p (str fold uuid \&quot;_product_\&quot; (format \&quot;%03d\&quot; @c1) \&quot;.jpg\&quot;))\n      (swap! c1 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))\n    (doseq [m models]\n      (save-picture m (str fold uuid \&quot;_model_\&quot; (format \&quot;%03d\&quot; @c2) \&quot;.jpg\&quot;))\n      (swap! c2 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))))\n\n(defn run\n  [url fold]\n  (let [urls (get-url url)\n        u1 (first urls)\n        urls (rest urls)\n        file (str fold \&quot;meta.csv\&quot;)]\n    (to u1)\n    (Thread/sleep 5000)\n    (let [html (freeze)\n          meta (get-meta html)]\n      (write-csv-quoted [meta] file)\n      (get-picture html fold meta)\n      (println \&quot;Initiated!\&quot;))\n    (doseq [u urls]\n      (try\n        (to u)\n        (Thread/sleep 5000)\n        (let [html (freeze)\n              meta (get-meta html)]\n          (write-csv-quoted [meta] file :append true)\n          (get-picture html fold meta)\n          (println \&quot;Succeeded!\&quot;))\n        (catch Throwable e (println \&quot;OOPS!\&quot;))))))\n\n(defn smart-run\n  [url fold]\n  (binding [my-driver (firefox)]\n    (run url fold)))\n\n\n(defn start\n  [job fold]\n  (doseq [j (lazy-read-csv job)]\n    (.mkdir (io/as-file (str fold (first j) \&quot;/\&quot;)))\n    (run (second j) (str fold (first j) \&quot;/\&quot;))\n    ))\n\n(defn smart-start\n  [job fold]\n  (binding [my-driver (firefox)]\n    (start job fold)))\n&quot; &quot;(smart-run \&quot;http://www.uniqlo.cn/view_page-246968917.htm?spm=0.0.0.0.aoLrHb\&quot;\n           \&quot;C:/data/testtest/test/\&quot;)&quot; &quot;(smart-run \&quot;http://www.uniqlo.cn/view_page-246968917.htm?spm=0.0.0.0.aoLrHb\&quot;\n           \&quot;C:/data/testtesttest/\&quot;)&quot; &quot;(binding [my-driver (firefox)]\n  (to \&quot;http://www.uniqlo.cn/view_page-685081549.htm?spm=0.0.0.0.EL277S\&quot;)\n  (get-url2 (freeze)))&quot; &quot;(ns uniqlo.core\n  (:import (java.io ByteArrayOutputStream File InputStreamReader StringReader)\n           (javax.imageio ImageIO)\n           (java.net URL)\n           [org.openqa.selenium WebDriver Cookie OutputType TakesScreenshot]\n           [org.openqa.selenium WebElement]\n           [org.openqa.selenium.support.ui ExpectedCondition ExpectedConditions]\n           [org.openqa.selenium.support.ui WebDriverWait]\n           (org.openqa.selenium.firefox FirefoxDriver FirefoxProfile)\n           (org.openqa.selenium By)\n           (org.openqa.selenium Cookie)\n           (org.openqa.selenium JavascriptExecutor)\n           (org.openqa.selenium.htmlunit HtmlUnitDriver)\n           (org.openqa.selenium.firefox.internal ProfilesIni)\n           (java.io File)\n           (org.openqa.selenium.ie InternetExplorerDriver)\n           (org.openqa.selenium.chrome ChromeDriver)\n           (org.openqa.selenium.remote Augmenter)\n           (java.util UUID))\n  (:require [mikera.image.core :as imagez]\n            [clojure.java.io :as io]\n            [net.cgrand.enlive-html :as html]\n            [clojure.string :as string]\n            [clojure-csv.core :as clj-csv]\n            [clojure.data.csv :as csv]))\n\n\n(def ^:dynamic my-driver nil)\n\n(defmacro use-firefox\n  []\n  `(def my-driver (FirefoxDriver.)))\n\n(defmacro use-htmlunit\n  []\n  `(def my-driver (HtmlUnitDriver.)))\n\n(defmacro use-ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;resources/driver/IEDriverServer.exe\&quot;)]\n    `(def my-driver (InternetExplorerDriver.))))\n\n(defmacro use-chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;resources/driver/chromedriver.exe\&quot;)]\n    `(def my-driver (ChromeDriver.))))\n\n(defn firefox\n  []\n  (FirefoxDriver.))\n\n(defn htmlunit\n  []\n  (HtmlUnitDriver.))\n\n(defn ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;C:/iedriver/IEDriverServer.exe\&quot;)]\n    (InternetExplorerDriver.)))\n\n(defn chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;C:/chromedriver/chromedriver.exe\&quot;)]\n    (ChromeDriver.)))\n\n(defn to\n  [url]\n  (.get my-driver url))\n\n(defn execute-script\n  [^String script]\n  (.executeScript ^JavascriptExecutor my-driver script (make-array Object 0)))\n\n(defn freeze\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource))\n\n(defn write-csv-quoted\n  [coll file &amp; {:keys [append encoding]}]\n  (let [keys-vec (keys (first coll))\n        vals-vecs (map (apply juxt keys-vec) coll)]\n    (with-open [out (io/writer file :append append :encoding encoding)]\n      (binding [*out* out]\n        (when-not append\n          (print (clj-csv/write-csv (vector (map name keys-vec)) :force-quote true)))\n        (doseq [v vals-vecs]\n          (let [v (map str v)]\n            (print (clj-csv/write-csv (vector v) :force-quote true))))))))\n\n(defn lazy-read-csv\n  [csv-file]\n  (let [in-file (io/reader csv-file)\n        csv-seq (csv/read-csv in-file)\n        lazy (fn lazy [wrapped]\n               (lazy-seq\n                 (if-let [s (seq wrapped)]\n                   (cons (first s) (lazy (rest s)))\n                   (.close in-file))))]\n    (lazy csv-seq)))\n\n(defn lazy-read-csv-head-on\n  [file]\n  (let [coll (lazy-read-csv file)\n        head (map keyword (first coll))\n        rows (rest coll)]\n    (map #(zipmap head %) rows)))\n\n\n(defn get-url\n  [url]\n  (let [html (html/html-resource (URL. url))\n        items (html/select html [:.permalink])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n(defn get-url2\n  [html]\n  (let [items (html/select html [:.main-wrap :a])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n\n(defn get-html\n  [url &amp; {:keys [encoding] :or {encoding \&quot;gbk\&quot;}}]\n  (-&gt; (URL. url)\n      .getContent\n      (InputStreamReader. encoding)\n      html/html-resource))\n\n\n(defn get-product-src\n  [html]\n  (-&gt;&gt; (html/select html [:.zoom-cache :img])\n       (map #(get-in % [:attrs :src]))))\n\n(defn get-model-src\n  [html]\n  (let [src (-&gt; (html/select html [:#J_DivItemDesc :table])\n                second\n                (html/select [:img]))]\n    (map #(get-in % [:attrs :src]) src)))\n\n(defn get-title\n  [html]\n  (-&gt; (html/select html [:.detail-hd])\n      first\n      html/text\n      string/trim))\n\n(defn get-description\n  [html]\n  (let [content (-&gt; (html/select html [:#J_DivItemDesc :table])\n                    first\n                    (html/select [:p]))]\n    (-&gt;&gt; (html/texts content)\n         (remove #(= \&quot;\&quot; %))\n         (map string/trim)\n         (string/join \&quot;////\&quot;))))\n\n(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul :li])\n       (map html/text)\n       (map string/trim)\n       (string/join \&quot;////\&quot;)\n       ))\n\n(defn get-price\n  [html]\n  (-&gt; (html/select html [:#J_StrPrice])\n      first\n      (html/text)))\n\n(defn save-picture\n  [url file]\n  (with-open [in (io/input-stream url)\n              out (io/output-stream file)]\n    (io/copy in out)))\n\n(defn get-meta\n  [html]\n  {:uuid        (UUID/randomUUID)\n   :title       (get-title html)\n   :description (get-description html)\n   :attribute   (get-attribute html)\n   :price       (get-price html)\n   })\n\n(defn get-picture\n  [html fold meta]\n  (let [products (get-product-src html)\n        models (get-model-src html)\n        uuid (:uuid meta)\n        c1 (atom 1)\n        c2 (atom 1)]\n    (doseq [p products]\n      (save-picture p (str fold uuid \&quot;_product_\&quot; (format \&quot;%03d\&quot; @c1) \&quot;.jpg\&quot;))\n      (swap! c1 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))\n    (doseq [m models]\n      (save-picture m (str fold uuid \&quot;_model_\&quot; (format \&quot;%03d\&quot; @c2) \&quot;.jpg\&quot;))\n      (swap! c2 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))))\n\n(defn run\n  [url fold]\n  (to url)\n  (Thread/sleep 3000)\n  (let [urls (get-url2 (freeze))\n        u1 (first urls)\n        urls (rest urls)\n        file (str fold \&quot;meta.csv\&quot;)]\n    (to u1)\n    (Thread/sleep 5000)\n    (let [html (freeze)\n          meta (get-meta html)]\n      (write-csv-quoted [meta] file)\n      (get-picture html fold meta)\n      (println \&quot;Initiated!\&quot;))\n    (doseq [u urls]\n      (try\n        (to u)\n        (Thread/sleep 5000)\n        (let [html (freeze)\n              meta (get-meta html)]\n          (write-csv-quoted [meta] file :append true)\n          (get-picture html fold meta)\n          (println \&quot;Succeeded!\&quot;))\n        (catch Throwable e (println \&quot;OOPS!\&quot;))))))\n\n(defn smart-run\n  [url fold]\n  (binding [my-driver (firefox)]\n    (run url fold)))\n\n\n(defn start\n  [job fold]\n  (doseq [j (lazy-read-csv job)]\n    (.mkdir (io/as-file (str fold (first j) \&quot;/\&quot;)))\n    (run (second j) (str fold (first j) \&quot;/\&quot;))\n    ))\n\n(defn smart-start\n  [job fold]\n  (binding [my-driver (firefox)]\n    (start job fold)))\n&quot; &quot;(ns uniqlo.core\n  (:import (java.io ByteArrayOutputStream File InputStreamReader StringReader)\n           (javax.imageio ImageIO)\n           (java.net URL)\n           [org.openqa.selenium WebDriver Cookie OutputType TakesScreenshot]\n           [org.openqa.selenium WebElement]\n           [org.openqa.selenium.support.ui ExpectedCondition ExpectedConditions]\n           [org.openqa.selenium.support.ui WebDriverWait]\n           (org.openqa.selenium.firefox FirefoxDriver FirefoxProfile)\n           (org.openqa.selenium By)\n           (org.openqa.selenium Cookie)\n           (org.openqa.selenium JavascriptExecutor)\n           (org.openqa.selenium.htmlunit HtmlUnitDriver)\n           (org.openqa.selenium.firefox.internal ProfilesIni)\n           (java.io File)\n           (org.openqa.selenium.ie InternetExplorerDriver)\n           (org.openqa.selenium.chrome ChromeDriver)\n           (org.openqa.selenium.remote Augmenter)\n           (java.util UUID))\n  (:require [mikera.image.core :as imagez]\n            [clojure.java.io :as io]\n            [net.cgrand.enlive-html :as html]\n            [clojure.string :as string]\n            [clojure-csv.core :as clj-csv]\n            [clojure.data.csv :as csv]))\n\n\n(def ^:dynamic my-driver nil)\n\n(defmacro use-firefox\n  []\n  `(def my-driver (FirefoxDriver.)))\n\n(defmacro use-htmlunit\n  []\n  `(def my-driver (HtmlUnitDriver.)))\n\n(defmacro use-ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;resources/driver/IEDriverServer.exe\&quot;)]\n    `(def my-driver (InternetExplorerDriver.))))\n\n(defmacro use-chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;resources/driver/chromedriver.exe\&quot;)]\n    `(def my-driver (ChromeDriver.))))\n\n(defn firefox\n  []\n  (FirefoxDriver.))\n\n(defn htmlunit\n  []\n  (HtmlUnitDriver.))\n\n(defn ie\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.ie.driver\&quot;\n            \&quot;C:/iedriver/IEDriverServer.exe\&quot;)]\n    (InternetExplorerDriver.)))\n\n(defn chrome\n  []\n  (let [_ (System/setProperty\n            \&quot;webdriver.chrome.driver\&quot;\n            \&quot;C:/chromedriver/chromedriver.exe\&quot;)]\n    (ChromeDriver.)))\n\n(defn to\n  [url]\n  (.get my-driver url))\n\n(defn execute-script\n  [^String script]\n  (.executeScript ^JavascriptExecutor my-driver script (make-array Object 0)))\n\n(defn freeze\n  []\n  (-&gt; (execute-script \&quot;return document.documentElement.outerHTML;\&quot;)\n      StringReader.\n      html/html-resource))\n\n(defn write-csv-quoted\n  [coll file &amp; {:keys [append encoding]}]\n  (let [keys-vec (keys (first coll))\n        vals-vecs (map (apply juxt keys-vec) coll)]\n    (with-open [out (io/writer file :append append :encoding encoding)]\n      (binding [*out* out]\n        (when-not append\n          (print (clj-csv/write-csv (vector (map name keys-vec)) :force-quote true)))\n        (doseq [v vals-vecs]\n          (let [v (map str v)]\n            (print (clj-csv/write-csv (vector v) :force-quote true))))))))\n\n(defn lazy-read-csv\n  [csv-file]\n  (let [in-file (io/reader csv-file)\n        csv-seq (csv/read-csv in-file)\n        lazy (fn lazy [wrapped]\n               (lazy-seq\n                 (if-let [s (seq wrapped)]\n                   (cons (first s) (lazy (rest s)))\n                   (.close in-file))))]\n    (lazy csv-seq)))\n\n(defn lazy-read-csv-head-on\n  [file]\n  (let [coll (lazy-read-csv file)\n        head (map keyword (first coll))\n        rows (rest coll)]\n    (map #(zipmap head %) rows)))\n\n\n(defn get-url\n  [url]\n  (let [html (html/html-resource (URL. url))\n        items (html/select html [:.permalink])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n(defn get-url-new\n  [html]\n  (let [items (html/select html [:.permalink])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n(defn get-url2\n  [html]\n  (let [items (html/select html [:.main-wrap :a])]\n    (-&gt; (map #(get-in % [:attrs :href]) items)\n        distinct)))\n\n\n(defn get-html\n  [url &amp; {:keys [encoding] :or {encoding \&quot;gbk\&quot;}}]\n  (-&gt; (URL. url)\n      .getContent\n      (InputStreamReader. encoding)\n      html/html-resource))\n\n\n(defn get-product-src\n  [html]\n  (-&gt;&gt; (html/select html [:.zoom-cache :img])\n       (map #(get-in % [:attrs :src]))))\n\n(defn get-model-src\n  [html]\n  (let [src (-&gt; (html/select html [:#J_DivItemDesc :table])\n                second\n                (html/select [:img]))]\n    (map #(get-in % [:attrs :src]) src)))\n\n(defn get-title\n  [html]\n  (-&gt; (html/select html [:.detail-hd])\n      first\n      html/text\n      string/trim))\n\n(defn get-description\n  [html]\n  (let [content (-&gt; (html/select html [:#J_DivItemDesc :table])\n                    first\n                    (html/select [:p]))]\n    (-&gt;&gt; (html/texts content)\n         (remove #(= \&quot;\&quot; %))\n         (map string/trim)\n         (string/join \&quot;////\&quot;))))\n\n(defn get-attribute\n  [html]\n  (-&gt;&gt; (html/select html [:#attributes :ul :li])\n       (map html/text)\n       (map string/trim)\n       (string/join \&quot;////\&quot;)\n       ))\n\n(defn get-price\n  [html]\n  (-&gt; (html/select html [:#J_StrPrice])\n      first\n      (html/text)))\n\n(defn save-picture\n  [url file]\n  (with-open [in (io/input-stream url)\n              out (io/output-stream file)]\n    (io/copy in out)))\n\n(defn get-meta\n  [html]\n  {:uuid        (UUID/randomUUID)\n   :title       (get-title html)\n   :description (get-description html)\n   :attribute   (get-attribute html)\n   :price       (get-price html)\n   })\n\n(defn get-picture\n  [html fold meta]\n  (let [products (get-product-src html)\n        models (get-model-src html)\n        uuid (:uuid meta)\n        c1 (atom 1)\n        c2 (atom 1)]\n    (doseq [p products]\n      (save-picture p (str fold uuid \&quot;_product_\&quot; (format \&quot;%03d\&quot; @c1) \&quot;.jpg\&quot;))\n      (swap! c1 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))\n    (doseq [m models]\n      (save-picture m (str fold uuid \&quot;_model_\&quot; (format \&quot;%03d\&quot; @c2) \&quot;.jpg\&quot;))\n      (swap! c2 inc)\n      (Thread/sleep (+ 5 (rand-int 5))))))\n\n(defn run\n  [url fold]\n  (to url)\n  (Thread/sleep 3000)\n  (let [urls (get-url-new (freeze))\n        u1 (first urls)\n        urls (rest urls)\n        file (str fold \&quot;meta.csv\&quot;)]\n    (to u1)\n    (Thread/sleep 5000)\n    (let [html (freeze)\n          meta (get-meta html)]\n      (write-csv-quoted [meta] file)\n      (get-picture html fold meta)\n      (println \&quot;Initiated!\&quot;))\n    (doseq [u urls]\n      (try\n        (to u)\n        (Thread/sleep 5000)\n        (let [html (freeze)\n              meta (get-meta html)]\n          (write-csv-quoted [meta] file :append true)\n          (get-picture html fold meta)\n          (println \&quot;Succeeded!\&quot;))\n        (catch Throwable e (println \&quot;OOPS!\&quot;))))))\n\n(defn smart-run\n  [url fold]\n  (binding [my-driver (firefox)]\n    (run url fold)))\n\n\n(defn start\n  [job fold]\n  (doseq [j (lazy-read-csv job)]\n    (.mkdir (io/as-file (str fold (first j) \&quot;/\&quot;)))\n    (run (second j) (str fold (first j) \&quot;/\&quot;))\n    ))\n\n(defn smart-start\n  [job fold]\n  (binding [my-driver (firefox)]\n    (start job fold)))\n&quot; &quot;(smart-run \&quot;http://www.uniqlo.cn/view_page-685081549.htm?spm=0.0.0.0.EL277S\&quot;\n           \&quot;C:/data/testtesttest/\&quot;)&quot;], :remote []}}</component>
</project>

